<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux, | Linux geek's scratchpad]]></title>
  <link href="http://pietrushnic.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://pietrushnic.github.io/"/>
  <updated>2014-08-21T22:32:09+02:00</updated>
  <id>http://pietrushnic.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux, RPi and USB over IP]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/08/18/linux-rpi-and-usb-over-ip/"/>
    <updated>2014-08-18T21:26:37+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/08/18/linux-rpi-and-usb-over-ip</id>
    <content type="html"><![CDATA[<p>Trying to google &lsquo;USB over IP&rsquo; doesn&rsquo;t give much except some business web pages that give
you it as a service. This brings some information about potential on the
market IMHO. Main idea is well presented on open source project page for <a href="http://usbip.sourceforge.net/">usbip</a>.
I really recommend to read <a href="https://www.usenix.org/legacy/events/usenix05/tech/freenix/hirofuchi.html">USB/IP &ndash; a Peripheral Bus Extension for Device Sharing over IP Network</a>
technical paper it describe briefly technical details and capability.</p>

<p>In short USB over IP is a sharing system aim to expose USB devices from server
to client encapsulating USB I/O messages in TCP/IP payload.</p>

<p><code>usbip</code> contain client and server side (called stub and VHCI (<em>Virtual Host
Controller Interface</em>). Stub is used on server side to hijack USB traffic
from/to connected device and send/receive it over the network. VHCI expose
stubbed device on client side and also send and receive data to/from server. We
can say that stub-VHCI pair working as intermediate layer in USB stack, giving
ability to connect over the netowork. <code>usbip</code> project provided both Linux and
Windows version. In mid of 2008 <code>usbip</code> was introduced to Linux kernel and
matured a while in staging directory. Few days ago I read
<a href="http://thread.gmane.org/gmane.linux.kernel/1763771">this</a> were Greg KH mention
that if it will be possible he will include <code>usbip</code> in <code>3.17-rc2</code>.</p>

<p>As you can expect the biggest problem with USB over IP is how to handle
480Mbit/s (USB2.0) or more over TCP/IP payload. The answer is it can&rsquo;t.
Recommended use case for <code>usbip</code> is LAN environment with low latency. Of course
you can try to use it over long distance but you will get best effort, which
varies according to device and application profile. Author of the idea
(Takahiro Hirofuchi) tested his solution and created some models for queue
management for different devices &ndash; you can read about it in technical paper.
Below I present Kingston USB stick test in function of delay.</p>

<h2>Seting up usbip</h2>

<p>What I tried to do was setting up my Rasberry Pi and connect it through my home
LAN to share USB device (Kingston DataTraveler). My configuration looks like that:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/usb-over-ip-net.png"><img src="http://pietrushnic.github.io/assets/images/usb-over-ip-net.png" alt="" /></a></p>

<p>First I installed latest <a href="http://www.raspberrypi.org/downloads/">Raspbian</a>.
Assuming SD card is <code>/dev/sdb</code>:</p>

<p><code>
sudo dd bs=4M if=2014-06-20-wheezy-raspbian.img of=/dev/sdb
</code></p>

<p>With fresh SD card we can boot and push finish on initial setup screen. If you
have DHCP set on your router that&rsquo;s great if not you have to manually configure
network inside RPi.</p>

<h3>usbip kernel modules for RPi</h3>

<p><code>usbip</code> package is available in Raspbian default repository. Fortunately for our
learning purposes, <code>usbip-core.ko</code> and <code>usbip-host.ko</code> modules are not compiled
in the kernel. What you can see when trying to run <code>usbipd</code>:</p>

<p><code>
usbipd: error: please load usbip-core.ko and usbip-host.ko!
</code></p>

<p>Let&rsquo;s see if support for USBIP is in kernel:</p>

<p>```
pi@raspberrypi /boot $ zcat /proc/config.gz |grep USBIP</p>

<h1>CONFIG_USBIP_CORE is not set</h1>

<p>```</p>

<p>Compiling Linux kernel on RPi can take number of hours. I saw different values
like 5-6, 10 and even 22. It depends on many factors. But we should not bother
and try to cross compile RPi on development machine. I will use my Y510P laptop
with i7 4700MQ 2.4GHz (4 cores).</p>

<p><code>
git clone https://github.com/raspberrypi/tools tools-rpi
git clone --depth=1 https://github.com/raspberrypi/linux linux-rpi
export PATH=${PWD}/tools-rpi/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin:${PATH}
cd linux-rpi
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcmrpi_defconfig
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig
</code></p>

<p>I compiled kernel on <code>3.12.y</code> branch. Go to <code>Device Drivers -&gt; Staging drivers -&gt;
USB/IP support</code>. I choose to compile usbip-core as loadable module. <code>Device Drivers-&gt;
Staging drivers -&gt; USB/IP support -&gt; Host driver</code> also is needed it
compiles usbip-host module. Optionally <code>Debug messages for USB/IP</code> can be set
if you want to see kernel debug messages from driver. After saving changes to
config file we can start compilation:</p>

<p><code>
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j8
</code></p>

<p>After finishing compilation we can move our image to SD card. First mount your
SD card (it won&rsquo;t automatically) and run compile modules with correct install
path.</p>

<p><code>
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=/media/sdb2 modules
sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=/media/sdb2 modules_install
sudo cp /media/sdb1/kernel.img /media/sdb1/kernel-backup.img
sudo cp arch/arm/boot/Image /media/sdb1/kernel.img
sudo umount /dev/sdb1
sudo umount /dev/sdb2
</code></p>

<p>Now we can connect card to RPi and boot it to check if new kernel was correctly
loaded.</p>

<h3>Running usbip on RPi</h3>

<p>Now on RPi we can load modules needed for <code>usbipd</code> and run it:</p>

<p><code>
sudo modprobe usbip-core
sudo modprobe usbip-host
sudo usbipd -D
</code></p>

<p>To what USB devices are connected to our system we can use:</p>

<p><code>
usbip list -l
</code></p>

<p>This will show output similar to this:</p>

<p>```</p>

<h1>Local USB devices</h1>

<ul>
<li><p>busid 1-1 (0424:9514)
      1-1:1.0 &ndash;> hub</p></li>
<li><p>busid 1-1.1 (0424:ec00)
      1-1.1:1.0 &ndash;> smsc95xx</p></li>
<li><p>busid 1-1.2 (0951:1625)
      1-1.2:1.0 &ndash;> usbip-host
```</p></li>
</ul>


<p><code>busid 1-1.2 (0951:1625)</code> is my Kingstone pendrive. If you are unsure which
busid is for device that you want to share compare device id and vendor id with
output of <code>lsusb</code>. To bind device to <code>usbip-host.ko</code> we should use:</p>

<p><code>
pi@raspberrypi ~ $ sudo usbip --debug bind -b 1-1.2
usbip: debug: /build/linux-tools-TqR1ks/linux-tools-3.2.17/drivers/staging/usbip/userspace/src/usbip.c:134:[run_command] running command: `bind'
usbip: debug: /build/linux-tools-TqR1ks/linux-tools-3.2.17/drivers/staging/usbip/userspace/src/usbip_bind.c:162:[unbind_other] 1-1.2:1.0 -&gt; usb-storage
usbip: debug: /build/linux-tools-TqR1ks/linux-tools-3.2.17/drivers/staging/usbip/userspace/src/utils.c:65:[modify_match_busid] write "add 1-1.2" to /sys/bus/usb/drivers/usbip-host/match_busid
bind device on busid 1-1.2: complete
</code></p>

<p>As you can see communication to <code>usbip-host</code> module is through writing into
sysfs file.</p>

<p><em>NOTE</em> : if you will try to bind device without root privileges or when modules
are not loaded you will get errors like below:
<code>
pi@raspberrypi ~ $ usbip bind -b 1-1.2
usbip: error: could not unbind driver from device on busid 1-1.2
pi@raspberrypi ~ $ sudo usbip bind -b 1-1.2
usbip: error: unable to bind device on 1-1.2
</code></p>

<h3>usbip &ndash; client side</h3>

<p>Our device should wait for communication. Let&rsquo;s go to client side of our LAN
and try to check if we can use our USB device. To check if device is available:</p>

<p>```
[22:29:37] pietrushnic:~ $ sudo usbip list -r 192.168.1.3</p>

<h1>Exportable USB devices</h1>

<ul>
<li>192.168.1.3
   1-1.2: Kingston Technology : DataTraveler 101 II (0951:1625)
        : /sys/devices/platform/bcm2708_usb/usb1/1-1/1-1.2
        : (Defined at Interface level) (00/00/00)
        :  0 &ndash; Mass Storage / SCSI / Bulk-Only (08/06/50)
```</li>
</ul>


<p>Where <code>192.168.1.3</code> is an IP of RPi. Everything seems to be ok. So let&rsquo;s try to
attach it and do some test:</p>

<p><code>
[22:31:11] pietrushnic:~ $ sudo usbip attach -r 192.168.1.3 -b 1-1.2
usbip: error: open vhci_driver
usbip: error: query
</code></p>

<p>Oops, looks like we don&rsquo;t have driver for client side. Let&rsquo;s see if it is
compiled in my kernel as module:</p>

<p><code>``
grep USBIP /boot/config-</code>uname -r`
CONFIG_USBIP_CORE=m
CONFIG_USBIP_VHCI_HCD=m
CONFIG_USBIP_HOST=m</p>

<h1>CONFIG_USBIP_DEBUG is not set</h1>

<p><code>``
Great so we can load</code>vhci-hcd`:</p>

<p><code>
sudo modprobe vhci-hcd
</code>
And attach pendriver from RPi. What we have to use is IP address and bus id.
<code>
sudo usbip attach -r 192.168.1.3 -b 1-1.2
</code></p>

<p>In dmesg we can find information about our device.
<code>
[  676.126820] usbip_core: module is from the staging directory, the quality is unknown, you have been warned.
[  676.127246] usbip_core: USB/IP Core v1.0.0
[  676.127964] vhci_hcd: module is from the staging directory, the quality is unknown, you have been warned.
[  676.128336] vhci_hcd vhci_hcd: USB/IP Virtual Host Controller
[  676.128341] vhci_hcd vhci_hcd: new USB bus registered, assigned bus number 5
[  676.128493] usb usb5: New USB device found, idVendor=1d6b, idProduct=0002
[  676.128495] usb usb5: New USB device strings: Mfr=3, Product=2, SerialNumber=1
[  676.128497] usb usb5: Product: USB/IP Virtual Host Controller
[  676.128498] usb usb5: Manufacturer: Linux 3.14-2-amd64 vhci_hcd
[  676.128499] usb usb5: SerialNumber: vhci_hcd
[  676.128603] hub 5-0:1.0: USB hub found
[  676.128607] hub 5-0:1.0: 8 ports detected
[  676.128732] vhci_hcd: USB/IP 'Virtual' Host Controller (VHCI) Driver v1.0.0
[  676.228522] vhci_hcd: changed 0
[  694.052076] vhci_hcd vhci_hcd: rhport(0) sockfd(3) devid(65540) speed(3)
[  694.052289] vhci_hcd: changed 1
[  694.158844] vhci_hcd: changed 0
[  694.267024] usb 5-1: new high-speed USB device number 2 using vhci_hcd
[  694.491154] usb 5-1: new high-speed USB device number 3 using vhci_hcd
[  694.715339] usb 5-1: new high-speed USB device number 4 using vhci_hcd
[  694.715356] usb 5-1: SetAddress Request (4) to port 0
[  694.758246] usb 5-1: New USB device found, idVendor=0951, idProduct=1625
[  694.758251] usb 5-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
[  694.758252] usb 5-1: Product: DT 101 II
[  694.758254] usb 5-1: Manufacturer: Kingston
[  694.758255] usb 5-1: SerialNumber: 001CC0EC3519EA51A0000017
[  694.809487] usb-storage 5-1:1.0: USB Mass Storage device detected
[  694.809582] scsi6 : usb-storage 5-1:1.0
[  694.809660] usbcore: registered new interface driver usb-storage
[  695.816239] scsi 6:0:0:0: Direct-Access     Kingston DT 101 II        PMAP PQ: 0 ANSI: 0 CCS
[  695.816627] sd 6:0:0:0: Attached scsi generic sg2 type 0
[  695.825894] sd 6:0:0:0: [sdb] 7815168 512-byte logical blocks: (4.00 GB/3.72 GiB)
[  695.833602] sd 6:0:0:0: [sdb] Write Protect is off
[  695.833616] sd 6:0:0:0: [sdb] Mode Sense: 03 41 00 00
[  695.841427] sd 6:0:0:0: [sdb] No Caching mode page found
[  695.841440] sd 6:0:0:0: [sdb] Assuming drive cache: write through
[  695.883028] sd 6:0:0:0: [sdb] No Caching mode page found
[  695.883044] sd 6:0:0:0: [sdb] Assuming drive cache: write through
[  695.903869]  sdb: sdb1 sdb2 &lt; sdb5 &gt;
[  695.941208] sd 6:0:0:0: [sdb] No Caching mode page found
[  695.941211] sd 6:0:0:0: [sdb] Assuming drive cache: write through
[  695.941214] sd 6:0:0:0: [sdb] Attached SCSI removable disk
</code></p>

<p>Device show correct informations in <code>lsusb</code> output and <code>/proc/partitions</code>.</p>

<h2>Testing usbip</h2>

<p>From technical paper that I mentioned above I understand that probably the most
important factor for <code>usbip</code> performance is latency. Simplest method to emulate
WAN delays is <code>tc</code> from <code>iproute2</code> package. It is available by as default tool
in Raspbian:</p>

<p><code>
sudo tc qdisc add dev eth0 root netem delay 100ms #add device and set delay
sudo tc qdisc change dev eth0 root netem delay 10ms #change delay
</code></p>

<p>To test read speed I used <code>dd</code> by simply:</p>

<p><code>
 sudo dd if=/dev/sdb of=/dev/null bs=1M count=5
</code>
So I tried few values with my Kingston pendrive:
<code>
   0ms : 1.7 MB/s
  10ms : 968 kB/s
  20ms : 652 kB/s
  30ms : 495 kB/s
  40ms : 394 kB/s
  50ms : 344 kB/s
 100ms : 177 kB/s
 200ms : 86.0 kB/s
 300ms : 67.5 kB/s
 400ms : 38.1 kB/s
 500ms : 30.6 kB/s
1000ms : 15.9 kB/s
</code></p>

<p>And something from <code>gnuplot</code> noob:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/usbip-rate.png"><img src="http://pietrushnic.github.io/assets/images/usbip-rate.png" alt="" /></a></p>

<h3>Cleanup</h3>

<p>Before we can disconnect device from RPi we have do few things. First detach
port to which remote device was connected. Which port ?</p>

<p><code>
sudo usbip port
</code></p>

<p>Next detach device you want to disconnect:</p>

<p><code>
sudo usbip detach -p 0
</code></p>

<p>Finally on RPi you can unbind device:
<code>
sudo usbip unbind -b 1-1.2
</code></p>

<p>Now device can be removed.</p>

<h2>Other devices</h2>

<p>With various results I tried other devices.</p>

<h3>Android phone</h3>

<p>I also tried to connect my Samsung GT-I9070. Unfortunately without luck:</p>

<p><code>
hub 5-0:1.0: Cannot enable port 1.  Maybe the USB cable is bad?
hub 5-0:1.0: unable to enumerate USB device on port 1
</code></p>

<p>I think it could be related with fact that my smartphone expose multiple
devices over one USB connection. What can be observed on <code>usbip</code> list:</p>

<p>```
 &ndash; busid 1-1.2 (04e8:6860)</p>

<pre><code>     1-1.2:1.0 -&gt; unknown
     1-1.2:1.1 -&gt; cdc_acm
     1-1.2:1.2 -&gt; cdc_acm
</code></pre>

<p>```
I see this as opportunity to debug, understand
and fix the driver.</p>

<h3>Arduino</h3>

<p>There was no problem with Arduino. I was even able to program it successfully.
Unfortunately to big delay (in my case 300ms) cause software errors:</p>

<p>```
Binary sketch size: 1,056 bytes (of a 30,720 byte maximum)</p>

<p>avrdude: stk500_getparm(): (a) protocol error, expect=0x14, resp=0x14</p>

<p>avrdude: stk500_getparm(): (a) protocol error, expect=0x14, resp=0x01
avrdude: stk500_initialize(): (a) protocol error, expect=0x14, resp=0x10
avrdude: initialization failed, rc=-1</p>

<pre><code>     Double check connections and try again, or use -F to override
     this check.
</code></pre>

<p>```</p>

<h2>Summary</h2>

<p>Looks like <code>usbip</code> is usable in low delay network. It would be great to test it
in real WAN. It is possible to use <code>usbip</code> with more sophisticated devices but
potential driver tweaking is required. As a telecommunication graduate I cannot
say about possible improvements in queue algorithms, like adaptive queueing
which depends on data transfer profile. It was interesting experience to play
with <code>usbip</code> and probably I will back to it especially to testing part of this
post.</p>

<p>If you have questions, suggestions or comments please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux (Debian Wheezy) on Lenovo y510p]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/05/16/debian-wheezy-on-lenovo-y510p/"/>
    <updated>2014-05-16T22:36:27+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/05/16/debian-wheezy-on-lenovo-y510p</id>
    <content type="html"><![CDATA[<p>After long analysis I decide to buy new laptop. I had about $1000
(or 3000PLN) and most important things to me were:</p>

<ul>
<li>i7 CPU &ndash; because of performance (of course at least 4700 series)</li>
<li>SSD &ndash; again performance</li>
<li>17.3” &ndash; working space</li>
<li>no OS/FreeDos/Linux &ndash; I will not pay additional fee to M$ for system that I won’t use</li>
<li>Full HD resolution</li>
<li>at least 8GB RAM</li>
<li>non-glare display</li>
</ul>


<p>First I realize that my budget is to small for such a hardware. Second as always
we have to deal with trade-offs, so you cannot have everything. In final round I had two candidates <a href="http://www.notebookcheck.net/Review-Acer-Aspire-V3-772G-747A321-Notebook.93916.0.html">Acer Aspire V7-772G</a>
and <a href="http://www.notebookcheck.net/Review-Lenovo-IdeaPad-Y510p-Notebook.97470.0.html">Lenovo IdeaPad y510p</a>.</p>

<p>I resign from using 17.3" display because most of them in my budget range were
glare and without Full HD support. After reading Newegg reviews about both
laptops I choose Lenovo. It is better brand with better design (ie. metal lid),
other parameters, except RAM expansion possibilities, are the same.</p>

<h2>First boot</h2>

<p>Today I have it on my desk and trying to install Debian Wheezy. I put Debian
netinst in drive and get wonderful UEFI message :)</p>

<p><img class="center" src="/assets/images/cdrom-blocked.jpg" width="450" height="450" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>I figure out that I have to disable my last days favourite feature from M$ &ndash;
namely Secure Boot. I was surprised when I realized that there is no hot key to
enter UEFI Setup. Instead of hot key Lenovo decide to put small button (called
Novo Button) on the side of laptop near power socket. Quite interesting idea
when taking into consideration that InsydeH20 Setup Utility doesn’t provide
much of functions, so we end with entering setup maybe dozen of times during laptop
lifetime. Also I think it can improve boot time a little bit because UEFI don’t
have to poll for user input during hot key pushing time window.</p>

<h2>Disable secure thing</h2>

<p>So to disable this <code>feature-that-name-should-be-doomed</code> you have to enter Setup
using Novo Button and switch to Security tab. At first glance you can find
option called <code>Scure Boot</code> set to <code>[Enabled]</code>. Description of this option said
<code>Enabl or Disable Secure Boot support</code>. Don’t be naive this button won’t do
what you want. To disable this devil work you have to push enter on <code>Reset to Seupt Mode</code>
option, which cleans keys database. Don&rsquo;t panic your database of
vendor keys will not disappear you can restore it anytime you want using
<code>Restore Factory Keys</code>. BTW I didn&rsquo;t found any information about it in <code>User Manual</code>.</p>

<p><img class="center" src="/assets/images/uefi-security.jpg" width="640" height="400" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<h2>Installation</h2>

<p>Next surprise after booting netinst (it works in UEFI mode, so no need to
switching to legacy) is that Debian <code>7.5.0</code> was unable to find driver for
on-board LAN card.So I installed my Debian over wireless Intel card. Wheezy use
<code>3.2.0</code> kernel which doesn&rsquo;t not contain <code>alx</code> driver with support for Qualcomm
Atheros QCA8171.</p>

<p>Note that there is possibility to load new driver from pendrive during
installation. But best way would using netinst with Jessie or Sid. You can get it <a href="http://www.debian.org/devel/debian-installer/">here</a>.
I with to knew that before I started to fight with stable version.</p>

<h2>Xorg crash</h2>

<p>After all above I booted my favourite distro and it welcomes me with blinking
cursor and Xorg crashed because of:
<code>
(EE) VESA(0): V_BIOS address 0x0 out of range
(EE) Screen(s) found, but none have a usable configuration
</code></p>

<p>During long an unequal battle, which was full of google hits. I figured out
that best way to improve awful situation in Debian stable for y510p is to
upgrade to Sid (unstable). Of course I messed up this because I tried move from
stable to unstable skipping testing.</p>

<p>I found on Debian pages that upgrade to <code>unstable</code> should be performed through
<code>testing</code> version. This mistake cost me time, because I have to install OS
second time after breaking my Gnome installation.</p>

<h2>Final considerations</h2>

<p>Upgrade to latest kernel version helps a lot but there are still many things to
do. Right now I&rsquo;m using Intel integrated graphics. It would be great to enable
second card GT755M and try Optimus technology. Especially when I would like to
rest from coding and try to relax playing Heroes Of Newearth. I also think
about running CUDA on my setup. Next thing for me will be testing vitalization
performance. If I will find reliable method to enable GT 755M on Debian I will
let you know.</p>

<p>I compiled edk2 and linux kernel. I see big difference in performance and
that&rsquo;s most important thing to me.</p>

<p>Some of you will say that Linux is a piece of $!#@, but for me this is very
good opportunity to verify my skills and contribute to community. During my
research about y510p I found also complains from Windows users that not all
works smoothly (Optimus), so there are also cons on the other side. Finally if
you won&rsquo;t deal with problems simply use Mint or Ubuntu there is much better
support there. By the way I think that I&rsquo;m immune to problems with my operating
system ;)</p>

<p><img class="center" src="/assets/images/lenovo-y510p.jpg" width="640" height="400" title="&lsquo;image&rsquo; &lsquo;images&rsquo;" ></p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
</feed>

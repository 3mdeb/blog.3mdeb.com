<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Linux geek's scratchpad]]></title>
  <link href="http://pietrushnic.github.io/atom.xml" rel="self"/>
  <link href="http://pietrushnic.github.io/"/>
  <updated>2015-06-13T14:47:19+02:00</updated>
  <id>http://pietrushnic.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ESP-12 update to SDK v0.9.5 and AT v0.21.0.0 - noobs tutorial]]></title>
    <link href="http://pietrushnic.github.io/blog/2015/01/25/esp-12-upgrade-to-esp-iot-sdk-v0-dot-9-5-using-esp-open-sdk-toolchain/"/>
    <updated>2015-01-25T22:32:01+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2015/01/25/esp-12-upgrade-to-esp-iot-sdk-v0-dot-9-5-using-esp-open-sdk-toolchain</id>
    <content type="html"><![CDATA[<p>January 23th Espressif published new ESP IOT SDK on their forum
<a href="http://bbs.espressif.com/viewtopic.php?f=5&amp;t=154">v0.9.5</a>. My ESP-12 came with
with pretty old version so I decide to update it to latest one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AT+RST
</span><span class='line'>
</span><span class='line'>OK
</span><span class='line'>y_RSöfJ[úndor:www.ai-thinker.com Version:0.9.2.4]
</span><span class='line'>
</span><span class='line'>ready
</span><span class='line'>AT+GMR
</span><span class='line'>0018000902-AI03
</span><span class='line'>
</span><span class='line'>OK</span></code></pre></td></tr></table></div></figure>


<h2>ESP-12 firmware update pin configuration</h2>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/esp-12-update.jpg"><img src="http://pietrushnic.github.io/assets/images/esp-12-update.jpg" alt="" /></a></p>

<p>As picture presents in addition to normal operation we have to pull down GPIO0
and pull up GPIO2.</p>

<h2>Upgrade using binaries from Espressif</h2>

<p>To upgrade you can use binaries that where delivered in zip packaged and python <a href="">esptool</a>. Run following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:themadinventor/esptool.git
</span><span class='line'>wget --content-disposition "http://bbs.espressif.com/download/file.php?id=189"
</span><span class='line'>unzip esp_iot_sdk_v0.9.5_15_01_23.zip
</span><span class='line'>cd esp_iot_sdk_v0.9.5/bin
</span><span class='line'>../../esptool/esptool.py write_flash 0x00000 boot_v1.2.bin 0x01000 at/user1.512.new.bin 0x3e000 blank.bin 0x7e000 blank.bin</span></code></pre></td></tr></table></div></figure>


<p>First we clone <code>esptool</code> repository, then we get latest SDK release directly
from forum and finally we ran <code>esptool</code>.</p>

<p>If you will get something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Connecting...
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "../../esptool/esptool.py", line 408, in &lt;module&gt;
</span><span class='line'>    esp.connect()
</span><span class='line'>  File "../../esptool/esptool.py", line 143, in connect
</span><span class='line'>    raise Exception('Failed to connect')
</span><span class='line'>Exception: Failed to connect</span></code></pre></td></tr></table></div></figure>


<p>You can work around this by toggling power to the module right before executing
<code>esptool</code> command. It works on my side.</p>

<p>Successful flashing looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1:00:21] pietrushnic:bin $ ../../esptool/esptool.py write_flash 0x00000 boot_v1.2.bin 0x01000 at/user1.512.new.bin 0x3e000 blank.bin 0x7e000 blank.bin
</span><span class='line'>Connecting...
</span><span class='line'>Erasing flash...
</span><span class='line'>Writing at 0x00000400... (100 %)
</span><span class='line'>Erasing flash...
</span><span class='line'>Writing at 0x00034800... (100 %)
</span><span class='line'>Erasing flash...
</span><span class='line'>Writing at 0x0003ec00... (100 %)
</span><span class='line'>Erasing flash...
</span><span class='line'>Writing at 0x0007ec00... (100 %)
</span><span class='line'>
</span><span class='line'>Leaving...</span></code></pre></td></tr></table></div></figure>


<p>After disconnecting GPIO0 and GPIO2 you can boot new firmware. Results should
look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AT+RST
</span><span class='line'>
</span><span class='line'>OK
</span><span class='line'>
</span><span class='line'> ets Jan  8 2013,rst cause:4, boot mode:(3,4)
</span><span class='line'>
</span><span class='line'>wdt reset
</span><span class='line'>load 0x40100000, len 816, room 16
</span><span class='line'>tail 0
</span><span class='line'>chksum 0x8d
</span><span class='line'>load 0x3ffe8000, len 788, room 8
</span><span class='line'>tail 12
</span><span class='line'>chksum 0xcf
</span><span class='line'>ho 0 tail 12 room 4
</span><span class='line'>load 0x3ffe8314, len 288, room 12
</span><span class='line'>tail 4
</span><span class='line'>chksum 0xcf
</span><span class='line'>csum 0xcf
</span><span class='line'>
</span><span class='line'>2nd boot version : 1.2
</span><span class='line'>  SPI Speed      : 40MHz
</span><span class='line'>  SPI Mode       : QIO
</span><span class='line'>  SPI Flash Size : 4Mbit
</span><span class='line'>jump to run user1
</span><span class='line'>
</span><span class='line'>rNÿ
</span><span class='line'>ready
</span><span class='line'>AT+GMR
</span><span class='line'>AT version:0.21.0.0
</span><span class='line'>SDK version:0.9.5
</span><span class='line'>
</span><span class='line'>OK</span></code></pre></td></tr></table></div></figure>


<p>Of course you will need the toolchain to use new SDK.</p>

<h2>Toolchain</h2>

<p><a href="https://github.com/pfalcon/esp-open-sdk">esp-open-sdk</a> is probably easiest to
use toolchain that I found for ESP8266. <code>esp-open-sdk</code> puts together steps
created by <a href="http://www.esp8266.com/">ESP8266 Community Forum</a> published in
<a href="https://github.com/esp8266/esp8266-wiki/wiki">esp8266-wiki</a> repository.</p>

<p><code>esp-open-sdk</code> at the moment of writing this post didn&rsquo;t support <code>v0.9.5</code> SDK,
but adding this support was pretty straight forward and can be found on my
github for of the <a href="https://github.com/pietrushnic/esp-open-sdk.git">repo</a>.
There is also <a href="https://github.com/pfalcon/esp-open-sdk/pull/18">pending PR</a> that hopefully will be merged.</p>

<p>Procedure is straight forward to follow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:pietrushnic/esp-open-sdk.git #or use https with https://github.com/pietrushnic/esp-open-sdk.git
</span><span class='line'>cd esp-open-sdk
</span><span class='line'>git co v0.9.5-support
</span><span class='line'>sed -i -e '/\s0.9.4/s/^/#/g' -e '/\s0.9.5/s/^#//g' Makefile
</span><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<p><code>sed</code> command will cause using <code>0.9.5</code> string as <code>VENDOR_SDK</code> for default build.</p>

<p>On my i7-4700 single threaded compilation takes ~20min. BTW I&rsquo;m trying to
figure out why I cannot use multiple jobs
<a href="https://github.com/pfalcon/esp-open-sdk/issues/19">here</a>.</p>

<p>Final message should contain something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=/home/pietrushnic/tmp/esp-open-sdk/xtensa-lx106-elf/bin:$PATH</span></code></pre></td></tr></table></div></figure>


<p>Just execute this command in your shell. If you missed that message run <code>make</code>
again it should skip all already compiled parts and display final message
again.</p>

<h2>Toolchain usage</h2>

<p>To use toolchain with example code from <code>v0.9.5</code> SDK you can simply:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd esp_iot_sdk_v0.9.5 </span></code></pre></td></tr></table></div></figure>


<p>Use package like it was presented in &ldquo;Upgrade using binaries from Espressif&rdquo; section. Trying to compile exmaples in <code>esp-open-sdk</code> will give you error like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>../../Makefile:154: warning: overriding recipe for target 'clean'
</span><span class='line'>../Makefile:258: warning: ignoring old recipe for target 'clean'
</span><span class='line'>You cloned without --recursive, fetching submodules for you.
</span><span class='line'>git submodule update --init --recursive
</span><span class='line'>make -C crosstool-NG -f ../Makefile _ct-ng
</span><span class='line'>make[1]: *** crosstool-NG: No such file or directory.  Stop.
</span><span class='line'>../../Makefile:140: recipe for target 'crosstool-NG/ct-ng' failed
</span><span class='line'>make: *** [crosstool-NG/ct-ng] Error 2</span></code></pre></td></tr></table></div></figure>


<p>When inside <code>esp_iot_sdk_v0.9.5</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp -r examples/at .
</span><span class='line'>make COMPILE=gcc</span></code></pre></td></tr></table></div></figure>


<p>Ommiting <code>COMPILE=gcc</code> will result in error caused by using differen compiler name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make[1]: Entering directory '/home/pietrushnic/src/espressif/esp_iot_sdk_v0.9.5/at/user'
</span><span class='line'>DEPEND: xt-xcc -M -Os -g -O2 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals -DICACHE_FLASH -I include -I ./ -I ../../include/ets -I ../include -I ../../include -I ../../include/eagle user_main.c
</span><span class='line'>/bin/sh: 2: xt-xcc: not found
</span><span class='line'>xt-xcc -Os -g -O2 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals  -DICACHE_FLASH   -I include -I ./ -I ../../include/ets -I ../include -I ../../include -I ../../include/eagle  -o .output/eagle/debug/obj/user_main.o -c user_main.c
</span><span class='line'>make[1]: xt-xcc: Command not found
</span><span class='line'>../../Makefile:280: recipe for target '.output/eagle/debug/obj/user_main.o' failed
</span><span class='line'>make[1]: *** [.output/eagle/debug/obj/user_main.o] Error 127
</span><span class='line'>make[1]: Leaving directory '/home/pietrushnic/src/espressif/esp_iot_sdk_v0.9.5/at/user'
</span><span class='line'>../Makefile:266: recipe for target '.subdirs' failed
</span><span class='line'>make: *** [.subdirs] Error 2</span></code></pre></td></tr></table></div></figure>


<p>Correct output looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make[1]: Entering directory '/home/pietrushnic/src/espressif/esp_iot_sdk_v0.9.5/at/user'
</span><span class='line'>DEPEND: xtensa-lx106-elf-gcc -M -Os -g -O2 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals -DICACHE_FLASH -I include -I ./ -I ../../include/ets -I ../include -I ../../include -I ../../include/eagle user_main.c
</span><span class='line'>xtensa-lx106-elf-gcc -Os -g -O2 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals  -DICACHE_FLASH   -I include -I ./ -I ../../include/ets -I ../include -I ../../include -I ../../include/eagle  -o .output/eagle/debug/obj/user_main.o -c user_main.c
</span><span class='line'>xtensa-lx106-elf-ar ru .output/eagle/debug/lib/libuser.a .output/eagle/debug/obj/user_main.o 
</span><span class='line'>xtensa-lx106-elf-ar: creating .output/eagle/debug/lib/libuser.a
</span><span class='line'>make[1]: Leaving directory '/home/pietrushnic/src/espressif/esp_iot_sdk_v0.9.5/at/user'
</span><span class='line'>xtensa-lx106-elf-gcc  -L../lib -nostdlib -T../ld/eagle.app.v6.ld -Wl,--no-check-sections -u call_user_start -Wl,-static -Wl,--start-group -lc -lgcc -lhal -lphy -lpp -lnet80211 -llwip -lwpa -lmain -ljson -lupgrade user/.output/eagle/debug/lib/libuser.a                                    -lat -Wl,--end-group -o .output/eagle/debug/image/eagle.app.v6.out 
</span><span class='line'>
</span><span class='line'>!!!
</span><span class='line'>No boot needed.
</span><span class='line'>Generate eagle.flash.bin and eagle.irom0text.bin successully in folder bin.
</span><span class='line'>eagle.flash.bin--------&gt;0x00000
</span><span class='line'>eagle.irom0text.bin----&gt;0x40000
</span><span class='line'>!!!</span></code></pre></td></tr></table></div></figure>


<p>Now <code>../bin</code> directory contain <code>eagle.flash.bin</code> and <code>eagle.irom0text.bin</code>,
which you can use to flash your ESP8266 using <code>esptool</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>../../esptool/esptool.py write_flash 0x00000 eagle.flash.bin 0x40000 eagle.irom0text.bin</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>Thanks for reading. Hope that this post fill the gap that some of beginner can
experience when goolging through straight forward tutorial about playing with
ESP. If you like this post please share. If you see some bias or you just want
to share some facts, ask question then please leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Power on of ESP-12 (ESP8266)]]></title>
    <link href="http://pietrushnic.github.io/blog/2015/01/24/power-on-of-esp-12/"/>
    <updated>2015-01-24T00:25:05+01:00</updated>
    <id>http://pietrushnic.github.io/blog/2015/01/24/power-on-of-esp-12</id>
    <content type="html"><![CDATA[<p>ESP8266 is a SoC made by <a href="https://espressif.com">Espressif</a>. For last couple of
months this chip is a rockstar of <a href="http://hackaday.com/">HackADay</a> and makers
community around the Internet. Mostly because of WiFi modules built based on it
(ESP-XX family). Rich interface (GPIO, SPI, SDIO, I2C) give those boards
potential to be standalone MCU with WiFi capability for wide range of
applications. In quantity you can get ESP-01 for $2.7 (for 1kpcs). Of course
there is no free lunch. Documentation is weak (this is no TI), but
<a href="http://www.esp8266.com/">community</a> doing it&rsquo;s best to change this state.
Native interface of AT commands is also not the friendliest way of
communicating by beginners. But also for that market found solution &ndash; namely
<a href="https://github.com/nodemcu/nodemcu-firmware">NodeMCU</a>.</p>

<p>A while ago I bought ESP-01 and experiment a little bit with it. I quickly
realize that to release additional powers from this module I need access to
other pins. ESP-01 expose only 2 GPIOs newer versions of the board provide more
and more. Of course there was a way to hack ESP-01, but using latest version
usually provide better feature set. Latest version known to wide public is
ESP-12 which expose ADC and 9 GPIO pins. Finally I took in possession couple of
them.</p>

<h2>Soldering</h2>

<p>Because this board came in SMD package I found that
<a href="http://www.electrodragon.com/">ElectroDragon</a> provides also adapter to solder
module and easily expose pins.</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/esp-12-adapter.jpg"><img src="http://pietrushnic.github.io/assets/images/esp-12-adapter.jpg" alt="" /></a></p>

<p>After applying my soldering-fu I get rewarding result.</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/esp-12-soldered.jpg"><img src="http://pietrushnic.github.io/assets/images/esp-12-soldered.jpg" alt="" /></a></p>

<h2>Wiring</h2>

<p>ESP-12 adapter from ElectroDragon got width of 31mm and pin distance match
ideally to prototype board. There is only one problem that adapter width put
pins into first and last column of the standard 10 column (A-J) breadboard.
Which give no ability to connect parallel wires, which was my initial idea.
Because I didn&rsquo;t have u shape solderless jumpers to make connection clean I
splitted old Ethernet cable and get this:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/u-shape-jumpers.jpg"><img src="http://pietrushnic.github.io/assets/images/u-shape-jumpers.jpg" alt="" /></a></p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/esp-12-breadboard.jpg"><img src="http://pietrushnic.github.io/assets/images/esp-12-breadboard.jpg" alt="" /></a></p>

<p>Check connections couple of time to make sure that everything works fine. As
USB UART I used FT232RL based module. Current provided by USB UART module can
be insufficient that&rsquo;s why I used lab DC power supply.</p>

<p>NOTE: Both ESP-12 and USB UART should be connected to the same GND.</p>

<h2>Power on</h2>

<p>It wasn&rsquo;t simple. First I tried minicom with 115200 UART speed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>minicom -b 115200 -o -D /dev/ttyUSB0</span></code></pre></td></tr></table></div></figure>


<p>This module display bootloader messages at 115200. After booting it switches to
9600. If you booted and can&rsquo;t communicate but blue LED blinking when you type
this may indicate that you need reset try <code>AT+RST&lt;Ctrl-M&gt;&lt;Ctrl-J&gt;</code>. You
should get something like this:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/esp-12-minicom-1.png"><img src="http://pietrushnic.github.io/assets/images/esp-12-minicom-1.png" /></a></p>

<p>There are lot of other commands like <code>AT+GMR</code> which give you firmware version.
More commands you can find
<a href="http://wiki.iteadstudio.com/ESP8266_Serial_WIFI_Module#AT_Commands">here</a>. Not
every firmware support all commands. To use more robust firmware you can
compile latest version of AT command or even modify it according to your needs.
Some instructions can be found
<a href="https://github.com/esp8266/esp8266-wiki/wiki">here</a>.</p>

<h2>Summary</h2>

<p>I think that ESP8266 has great potential to make pressure on market and
squeeze better solutions. There is a lot of interesting things going on around
ESP like MQTT implementation of firmware or recently released FreeRTOS SDK
from Espressif. I hope to write more about ESP-12 in future. If you think this
post was useful please leave a comment or share with friends.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi kernel repository aggregating patches for Linux mainline]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/10/15/raspberry-pi-kernel-repository-aggregating-patches-for-linux-mainline/"/>
    <updated>2014-10-15T23:23:11+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/10/15/raspberry-pi-kernel-repository-aggregating-patches-for-linux-mainline</id>
    <content type="html"><![CDATA[<p>Since several months I&rsquo;m trying to find my way to embedded Linux programming.
My hardware set was very limited I had only one board that can be called
&ldquo;embedded&rdquo; and it was Raspberry Pi. Because I am more interested in firmware/OS
level then hardware I tried to figure out what is going on with RPi kernel.
After taking brief review of
<a href="https://github.com/raspberrypi/linux">raspberrypi/linux</a> GitHub repository I
realized that close to my heart is upstreaming effort. So with noob attitude I
contacted RPi Upstreaming wiki page author (<a href="https://github.com/notro">notro</a>)
and we started to create some foundation.</p>

<p><em>Disclaimer: These are for testing purposes and considered unstable. Use at your own risk.</em>
<em>Edit: 20/10/2014:</em> minor typo, clone instructions moved to &ldquo;How to use it ?&rdquo; section</p>

<h2>What we have now ?</h2>

<p>We created set of repositories to handle upstreaming process.</p>

<p>First there is <a href="https://github.com/pietrushnic/rpi-dt-linux.git">rpi-dt-linux</a>
it is Linux kernel based on
<a href="https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/">linux-stable</a>
with patches on top of every branch. This repository aims to aggregate all
patches required for Raspberry Pi support in upstream kernel. <code>rpi-dt-linux</code>
use <code>bcm2835_defconfig</code> with device tree support. We want to introduce every
driver that supports device tree. Right now a lot of stuff is missing, but I
will dive into it later.</p>

<p>After consulting with
<a href="https://github.com/raspberrypi/linux/issues/698">popcornmix</a> we decide to
rebase all patches to keep them on top of every branch. This of course mean
that repository will be broken, but patches will be more visible in history.</p>

<p>Second <a href="https://github.com/pietrushnic/rpi-dt-firmware">rpi-dt-firmware</a> is ready
to use firmware files for Raspberry Pi with already built modules and kernel.
If you are familiar with <a href="https://github.com/Hexxeh">Hexxeh</a>
<a href="https://github.com/Hexxeh/rpi-update">rpi-update</a> and his repository
<a href="https://github.com/Hexxeh/rpi-firmware">rpi-firmware</a> this should not be
anything new for you.</p>

<p>Third <a href="https://github.com/notro/rpi-bcm2835">rpi-bcm2835</a> which simplifies
build and release process of <code>rpi-dt-linux</code>.</p>

<h2>How to use it ?</h2>

<h2>User</h2>

<p>If you simply want to try new kernel on your RPi then install <code>rpi-update</code>, by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install rpi-update</span></code></pre></td></tr></table></div></figure>


<p>on Raspbian or follow instruction from
<a href="https://github.com/Hexxeh/rpi-update">Readme.md</a> for other distributions.</p>

<p>To install latest release of <code>rpi-dt-firmware</code> use <code>rpi-update</code> on RPi:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo REPO_URI=https://github.com/pietrushnic/rpi-dt-firmware rpi-update</span></code></pre></td></tr></table></div></figure>


<p>After update simply reboot your Pi and enjoy our upstream kernel :).</p>

<h2>Developer</h2>

<p>If you want to play with the code I have few hints that can help.</p>

<p>First please clone <code>rpi-dt-linux</code> and <code>rpi-bcm2835</code> mentioned above.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/pietrushnic/rpi-dt-linux.git
</span><span class='line'>git clone https://github.com/notro/rpi-bcm2835.git</span></code></pre></td></tr></table></div></figure>


<p>Then install <a href="https://github.com/notro/rpi-build">rpi-build</a> following
instructions on <a href="https://github.com/notro/rpi-build/wiki">wiki</a>. Then you can
do few things:</p>

<p>Build <code>rpi-dt-linux</code> locally. This will download latest snapshot of
<code>rpi-dt-linux</code> and other dependencies like <code>u-boot</code> and cross-compiler.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd path/to/rpi-bcm2835
</span><span class='line'>rpi-build rpi-dt-linux clean build</span></code></pre></td></tr></table></div></figure>


<p>You can install already built kernel on your machine over ssh (replace
<code>&lt;RPI_IP&gt;</code> with your Pi IP address):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rpi-build rpi-dt-linux install SSHIP=&lt;RPI_IP&gt;</span></code></pre></td></tr></table></div></figure>


<p>If you want to use your own kernel repository just use <code>rpi-bcm2835</code> with local
path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RPI_DT_LINUX_LOCAL=../../rpi-dt-linux rpi-build rpi-dt-linux clean build</span></code></pre></td></tr></table></div></figure>


<p>NOTE: that additional level of <code>../</code> was added because rpi-build creates
workdir which is reference directory for it.</p>

<p>It is also possible to release your own firmware repository. To help with
process there are two commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FW_REPO=/home/pietrushnic/src/rpi-dt-firmware FW_BRANCH=master rpi-build rpi-dt-linux commit
</span><span class='line'>FW_REPO=/home/pietrushnic/src/rpi-dt-firmware FW_BRANCH=master rpi-build rpi-dt-linux push</span></code></pre></td></tr></table></div></figure>


<p>Obviously <code>FW_REPO</code> is a directory with firmware git repository.</p>

<h2>Changelog</h2>

<p>At the point of writing this post there were 3 releases of <code>rpi-dt-firmware</code>. We
applied v10 of <a href="http://lwn.net/Articles/607424/">mailbox API</a> and Lubomir
Rintel <code>bcm2835-mbox</code>, <code>bcm2835-cpufreq</code> and <code>bcm2835-thermal</code> drivers from his
<a href="https://github.com/hackerspace/rpi-linux/commits/lr-raspberry-pi-new-mailbox">repository</a>.
All updates are published in
<a href="https://github.com/pietrushnic/rpi-dt-firmware/blob/master/README.md">README.md</a>
with every release.</p>

<h2>Summary</h2>

<p>Of course we are happy with every contribution small and big, critique and
process improvement hints. Let us know what you think about this effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[virtualbox-dkms: fix alloc_netdev problems when compiling with 3.17.0-rcX headers]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/09/20/virtualbox-dkms-fix-alloc-netdev-problems-when-compiling-with-3-dot-17-dot-0-rcx-headers/"/>
    <updated>2014-09-20T22:55:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/09/20/virtualbox-dkms-fix-alloc-netdev-problems-when-compiling-with-3-dot-17-dot-0-rcx-headers</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>Because of my bug hunting approach of using latest kernel I experienced problem
with compiling VirtualBox modules with <code>3.17.0-rc5</code> version on my Debian Jessie. Issue is well
known and described for examples <a href="https://bugs.launchpad.net/ubuntu/+source/virtualbox/+bug/1358157">here</a>.
Problem manifest itself with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>------------------------------
</span><span class='line'>Deleting module version: 4.3.14
</span><span class='line'>completely from the DKMS tree.
</span><span class='line'>------------------------------
</span><span class='line'>Done.
</span><span class='line'>Loading new virtualbox-4.3.14 DKMS files...
</span><span class='line'>Building only for 3.17.0-rc5+
</span><span class='line'>Building initial module for 3.17.0-rc5+
</span><span class='line'>Error! Bad return status for module build on kernel: 3.17.0-rc5+ (x86_64)
</span><span class='line'>Consult /var/lib/dkms/virtualbox/4.3.14/build/make.log for more information.
</span><span class='line'>Job for virtualbox.service failed. See 'systemctl status virtualbox.service' and 'journalctl -xn' for details.
</span><span class='line'>invoke-rc.d: initscript virtualbox, action "restart" failed.</span></code></pre></td></tr></table></div></figure>


<p>during <code>virtualbox-dkms</code> package installation or reconfiguration. In <code>make.log</code> you will find compilation error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  CC [M]  /var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.o
</span><span class='line'>/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.c: In function ‘vboxNetAdpOsCreate’:
</span><span class='line'>/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.c:186:48: error: macro "alloc_netdev" requires 4 arguments, but only 3 given
</span><span class='line'>                            vboxNetAdpNetDevInit);
</span><span class='line'>                                                ^
</span><span class='line'>/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.c:184:15: error: ‘alloc_netdev’ undeclared (first use in this function)
</span><span class='line'>     pNetDev = alloc_netdev(sizeof(VBOXNETADPPRIV),
</span><span class='line'>               ^
</span><span class='line'>/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.c:184:15: note: each undeclared identifier is reported only once for each function it appears in
</span><span class='line'>/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.c: At top level:
</span><span class='line'>/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.c:159:13: warning: ‘vboxNetAdpNetDevInit’ defined but not used [-Wunused-function]
</span><span class='line'> static void vboxNetAdpNetDevInit(struct net_device *pNetDev)
</span><span class='line'>             ^
</span><span class='line'>scripts/Makefile.build:257: recipe for target '/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.o' failed
</span><span class='line'>make[2]: *** [/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp/linux/VBoxNetAdp-linux.o] Error 1
</span><span class='line'>scripts/Makefile.build:404: recipe for target '/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp' failed
</span><span class='line'>make[1]: *** [/var/lib/dkms/virtualbox/4.3.14/build/vboxnetadp] Error 2
</span><span class='line'>Makefile:1373: recipe for target '_module_/var/lib/dkms/virtualbox/4.3.14/build' failed
</span><span class='line'>make: *** [_module_/var/lib/dkms/virtualbox/4.3.14/build] Error 2
</span><span class='line'>make: Leaving directory '/usr/src/linux-headers-3.17.0-rc5+'</span></code></pre></td></tr></table></div></figure>


<p>For sure we have to wait for some time before new version of kernel and
VirtualBox will catch up each other in Debian.</p>

<h2>Fix source code of Debian package</h2>

<p>Let&rsquo;s get get virtualbox package source, fix issues rebuild package and install
in the system. Patch to apply can be found <a href="https://forums.virtualbox.org/viewtopic.php?p=296650#p296650">here</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get source virtualbox-dkms
</span><span class='line'>cd virtualbox-4.3.14-dfsg</span></code></pre></td></tr></table></div></figure>


<p>Now we can patch the sources with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/src/VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c b/src/VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c</span>
</span><span class='line'><span class="gh">index c6b21a9cc199..9ccce6f32218 100644</span>
</span><span class='line'><span class="gd">--- a/src/VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c</span>
</span><span class='line'><span class="gi">+++ b/src/VBox/HostDrivers/VBoxNetAdp/linux/VBoxNetAdp-linux.c</span>
</span><span class='line'><span class="gu">@@ -52,6 +52,25 @@</span>
</span><span class='line'>
</span><span class='line'> #define VBOXNETADP_FROM_IFACE(iface) ((PVBOXNETADP) ifnet_softc(iface))
</span><span class='line'>
</span><span class='line'><span class="gi">+/*******************************</span>
</span><span class='line'><span class="gi">+source for the 4th parameter alloc_netdev fix for kernel 3.17-rc1 is:</span>
</span><span class='line'><span class="gi">+https://github.com/proski/madwifi/commit/c5246021b7b8580c2aeb0a145903acc07d246ac1</span>
</span><span class='line'><span class="gi">+*/</span>
</span><span class='line'><span class="gi">+#ifndef NET_NAME_UNKNOWN</span>
</span><span class='line'><span class="gi">+#undef alloc_netdev</span>
</span><span class='line'><span class="gi">+#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,23)</span>
</span><span class='line'><span class="gi">+#define alloc_netdev(sizeof_priv, name, name_assign_type, setup) \</span>
</span><span class='line'><span class="gi">+  alloc_netdev(sizeof_priv, name, setup)</span>
</span><span class='line'><span class="gi">+#elif LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,6,38)</span>
</span><span class='line'><span class="gi">+#define alloc_netdev(sizeof_priv, name, name_assign_type, setup) \</span>
</span><span class='line'><span class="gi">+  alloc_netdev_mq(sizeof_priv, name, setup, 1)</span>
</span><span class='line'><span class="gi">+#else</span>
</span><span class='line'><span class="gi">+#define alloc_netdev(sizeof_priv, name, name_assign_type, setup) \</span>
</span><span class='line'><span class="gi">+  alloc_netdev_mqs(sizeof_priv, name, setup, 1, 1)</span>
</span><span class='line'><span class="gi">+#endif</span>
</span><span class='line'><span class="gi">+#endif</span>
</span><span class='line'><span class="gi">+/*******************************/</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> /*******************************************************************************
</span><span class='line'> *   Internal Functions                                                         *
</span><span class='line'> *******************************************************************************/
</span><span class='line'><span class="gu">@@ -183,6 +202,7 @@ int vboxNetAdpOsCreate(PVBOXNETADP pThis, PCRTMAC pMACAddress)</span>
</span><span class='line'>     /* No need for private data. */
</span><span class='line'>     pNetDev = alloc_netdev(sizeof(VBOXNETADPPRIV),
</span><span class='line'>                            pThis-&gt;szName[0] ? pThis-&gt;szName : VBOXNETADP_LINUX_NAME,
</span><span class='line'><span class="gi">+                           NET_NAME_UNKNOWN,</span>
</span><span class='line'>                            vboxNetAdpNetDevInit);
</span><span class='line'>     if (pNetDev)
</span><span class='line'>     {
</span><span class='line'><span class="gh">diff --git a/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c b/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c</span>
</span><span class='line'><span class="gh">index 21e124bda039..2a046a3b254a 100644</span>
</span><span class='line'><span class="gd">--- a/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c</span>
</span><span class='line'><span class="gi">+++ b/src/VBox/Runtime/r0drv/linux/alloc-r0drv-linux.c</span>
</span><span class='line'><span class="gu">@@ -191,7 +191,7 @@ static PRTMEMHDR rtR0MemAllocExecVmArea(size_t cb)</span>
</span><span class='line'>         struct page **papPagesIterator = papPages;
</span><span class='line'>         pVmArea-&gt;nr_pages = cPages;
</span><span class='line'>         pVmArea-&gt;pages    = papPages;
</span><span class='line'><span class="gd">-        if (!map_vm_area(pVmArea, PAGE_KERNEL_EXEC, &amp;papPagesIterator))</span>
</span><span class='line'><span class="gi">+        if (!map_vm_area(pVmArea, PAGE_KERNEL_EXEC, papPagesIterator))</span>
</span><span class='line'>         {
</span><span class='line'>             PRTMEMLNXHDREX pHdrEx = (PRTMEMLNXHDREX)pVmArea-&gt;addr;
</span><span class='line'>             pHdrEx-&gt;pVmArea     = pVmArea;
</span></code></pre></td></tr></table></div></figure>


<p>Assuming you save above code in <code>my_patch</code> file and you are in <code>virtualbox</code>
dpkg source directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>patch -p1 &lt; my_patch
</span></code></pre></td></tr></table></div></figure>


<p>Install packages required to build:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo apt-get build-dep virtualbox
</span></code></pre></td></tr></table></div></figure>


<p>And build with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>dpkg-buildpackage -uc -b
</span></code></pre></td></tr></table></div></figure>


<p>In result we should get all <code>virtualbox</code> packages. We need only <code>dkms</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>sudo dpkg -i ../virtualbox-dkms_4.3.14-dfsg-1_all.deb
</span><span class='line'>
</span><span class='line'><span class="o">(</span>Reading database ... 432638 files and directories currently installed.<span class="o">)</span>
</span><span class='line'>Preparing to unpack .../virtualbox-dkms_4.3.14-dfsg-1_all.deb ...
</span><span class='line'>
</span><span class='line'>------------------------------
</span><span class='line'>Deleting module version: 4.3.14
</span><span class='line'>completely from the DKMS tree.
</span><span class='line'>------------------------------
</span><span class='line'>Done.
</span><span class='line'>Unpacking virtualbox-dkms <span class="o">(</span>4.3.14-dfsg-1<span class="o">)</span> over <span class="o">(</span>4.3.14-dfsg-1<span class="o">)</span> ...
</span><span class='line'>Setting up virtualbox-dkms <span class="o">(</span>4.3.14-dfsg-1<span class="o">)</span> ...
</span><span class='line'>Loading new virtualbox-4.3.14 DKMS files...
</span><span class='line'>Building only <span class="k">for </span>3.17.0-rc5+
</span><span class='line'>Building initial module <span class="k">for </span>3.17.0-rc5+
</span><span class='line'>Done.
</span><span class='line'>
</span><span class='line'>vboxdrv:
</span><span class='line'>Running module version sanity check.
</span><span class='line'> - Original module
</span><span class='line'>   - No original module exists within this kernel
</span><span class='line'> - Installation
</span><span class='line'>   - Installing to /lib/modules/3.17.0-rc5+/updates/dkms/
</span><span class='line'>
</span><span class='line'>vboxnetadp.ko:
</span><span class='line'>Running module version sanity check.
</span><span class='line'> - Original module
</span><span class='line'>   - No original module exists within this kernel
</span><span class='line'> - Installation
</span><span class='line'>   - Installing to /lib/modules/3.17.0-rc5+/updates/dkms/
</span><span class='line'>
</span><span class='line'>vboxnetflt.ko:
</span><span class='line'>Running module version sanity check.
</span><span class='line'> - Original module
</span><span class='line'>   - No original module exists within this kernel
</span><span class='line'> - Installation
</span><span class='line'>   - Installing to /lib/modules/3.17.0-rc5+/updates/dkms/
</span><span class='line'>
</span><span class='line'>vboxpci.ko:
</span><span class='line'>Running module version sanity check.
</span><span class='line'> - Original module
</span><span class='line'>   - No original module exists within this kernel
</span><span class='line'> - Installation
</span><span class='line'>   - Installing to /lib/modules/3.17.0-rc5+/updates/dkms/
</span><span class='line'>
</span><span class='line'>sed: -e expression <span class="c">#1, char 6: unknown command: `m&#39;</span>
</span><span class='line'>depmod....
</span><span class='line'>
</span><span class='line'>DKMS: install completed.<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can happily use VirtualBox with <code>3.17.0-rc5</code> kernel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix backlight issue on IdeaPad y510p]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/08/23/how-to-fix-backlight-issue-on-ideapad-y510p/"/>
    <updated>2014-08-23T23:49:03+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/08/23/how-to-fix-backlight-issue-on-ideapad-y510p</id>
    <content type="html"><![CDATA[<p>Today I decide to switch to latest kernel (<code>3.17-rc1</code>) on my IdeaPad y510p. I
hit only one annoying problem until now &ndash; after booting my main screen was dimmed. I
tried all instructions from top google hits for all possible configurations of
keywords <code>linux</code>, <code>y510p</code>, <code>backlight issue</code>, etc.</p>

<p>Especially I tried all methods from <a href="https://wiki.archlinux.org/index.php/Intel_graphics#Backlight_is_not_adjustable">Arch Wiki</a>.</p>

<p>Finally I found solution, by greping <code>modinfo</code> for my Intel graphics card:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[23:55:24] pietrushnic:~ $ sudo modinfo i915|grep backlight
</span><span class='line'>parm:           invert_brightness:Invert backlight brightness (-1 force normal, \
</span><span class='line'> 0 machine defaults, 1 force inversion), please report PCI device ID, subsystem \
</span><span class='line'>vendor and subsystem device ID to dri-devel@lists.freedesktop.org, if your \
</span><span class='line'>machine needs it. It will then be included in an upcoming module version. (int)</span></code></pre></td></tr></table></div></figure>


<p>So simple modification in <code>/etc/default/grub</code> by adding kernel parameter to
<code>GRUB_CMDLINE_LINUX_DEFAULT</code> fix the issue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># If you change this file, run 'update-grub' afterwards to update
</span><span class='line'># /boot/grub/grub.cfg.
</span><span class='line'># For full documentation of the options in this file, see:
</span><span class='line'>#   info -f grub -n 'Simple configuration'
</span><span class='line'>
</span><span class='line'>GRUB_DEFAULT=0
</span><span class='line'>GRUB_TIMEOUT=5
</span><span class='line'>GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`
</span><span class='line'>GRUB_CMDLINE_LINUX_DEFAULT="rcutree.rcu_idle_gp_delay=1 i915.invert_brightness=1"
</span><span class='line'>GRUB_CMDLINE_LINUX=""
</span><span class='line'>(...)</span></code></pre></td></tr></table></div></figure>


<p>After that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo update-grub</span></code></pre></td></tr></table></div></figure>


<p>And all things should work fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux, RPi and USB over IP]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/08/18/linux-rpi-and-usb-over-ip/"/>
    <updated>2014-08-18T21:26:37+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/08/18/linux-rpi-and-usb-over-ip</id>
    <content type="html"><![CDATA[<p>Trying to google &lsquo;USB over IP&rsquo; doesn&rsquo;t give much except some business web pages that give
you it as a service. This brings some information about potential on the
market IMHO. Main idea is well presented on open source project page for <a href="http://usbip.sourceforge.net/">usbip</a>.
I really recommend to read <a href="https://www.usenix.org/legacy/events/usenix05/tech/freenix/hirofuchi.html">USB/IP &ndash; a Peripheral Bus Extension for Device Sharing over IP Network</a>
technical paper it describe briefly technical details and capability.</p>

<p>In short USB over IP is a sharing system aim to expose USB devices from server
to client encapsulating USB I/O messages in TCP/IP payload.</p>

<p><code>usbip</code> contain client and server side (called stub and VHCI (<em>Virtual Host
Controller Interface</em>). Stub is used on server side to hijack USB traffic
from/to connected device and send/receive it over the network. VHCI expose
stubbed device on client side and also send and receive data to/from server. We
can say that stub-VHCI pair working as intermediate layer in USB stack, giving
ability to connect over the netowork. <code>usbip</code> project provided both Linux and
Windows version. In mid of 2008 <code>usbip</code> was introduced to Linux kernel and
matured a while in staging directory. Few days ago I read
<a href="http://thread.gmane.org/gmane.linux.kernel/1763771">this</a> were Greg KH mention
that if it will be possible he will include <code>usbip</code> in <code>3.17-rc2</code>.</p>

<p>As you can expect the biggest problem with USB over IP is how to handle
480Mbit/s (USB2.0) or more over TCP/IP payload. The answer is it can&rsquo;t.
Recommended use case for <code>usbip</code> is LAN environment with low latency. Of course
you can try to use it over long distance but you will get best effort, which
varies according to device and application profile. Author of the idea
(Takahiro Hirofuchi) tested his solution and created some models for queue
management for different devices &ndash; you can read about it in technical paper.
Below I present Kingston USB stick test in function of delay.</p>

<h2>Seting up usbip</h2>

<p>What I tried to do was setting up my Rasberry Pi and connect it through my home
LAN to share USB device (Kingston DataTraveler). My configuration looks like that:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/usb-over-ip-net.png"><img src="http://pietrushnic.github.io/assets/images/usb-over-ip-net.png" alt="" /></a></p>

<p>First I installed latest <a href="http://www.raspberrypi.org/downloads/">Raspbian</a>.
Assuming SD card is <code>/dev/sdb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo dd bs=4M if=2014-06-20-wheezy-raspbian.img of=/dev/sdb</span></code></pre></td></tr></table></div></figure>


<p>With fresh SD card we can boot and push finish on initial setup screen. If you
have DHCP set on your router that&rsquo;s great if not you have to manually configure
network inside RPi.</p>

<h3>usbip kernel modules for RPi</h3>

<p><code>usbip</code> package is available in Raspbian default repository. Fortunately for our
learning purposes, <code>usbip-core.ko</code> and <code>usbip-host.ko</code> modules are not compiled
in the kernel. What you can see when trying to run <code>usbipd</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usbipd: error: please load usbip-core.ko and usbip-host.ko!</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s see if support for USBIP is in kernel:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pi@raspberrypi /boot $ zcat /proc/config.gz |grep USBIP
</span><span class='line'># CONFIG_USBIP_CORE is not set</span></code></pre></td></tr></table></div></figure>


<p>Compiling Linux kernel on RPi can take number of hours. I saw different values
like 5-6, 10 and even 22. It depends on many factors. But we should not bother
and try to cross compile RPi on development machine. I will use my Y510P laptop
with i7 4700MQ 2.4GHz (4 cores).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/raspberrypi/tools tools-rpi
</span><span class='line'>git clone --depth=1 https://github.com/raspberrypi/linux linux-rpi
</span><span class='line'>export PATH=${PWD}/tools-rpi/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin:${PATH}
</span><span class='line'>cd linux-rpi
</span><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcmrpi_defconfig
</span><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span></code></pre></td></tr></table></div></figure>


<p>I compiled kernel on <code>3.12.y</code> branch. Go to <code>Device Drivers -&gt; Staging drivers -&gt;
USB/IP support</code>. I choose to compile usbip-core as loadable module. <code>Device Drivers-&gt;
Staging drivers -&gt; USB/IP support -&gt; Host driver</code> also is needed it
compiles usbip-host module. Optionally <code>Debug messages for USB/IP</code> can be set
if you want to see kernel debug messages from driver. After saving changes to
config file we can start compilation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j8</span></code></pre></td></tr></table></div></figure>


<p>After finishing compilation we can move our image to SD card. First mount your
SD card (it won&rsquo;t automatically) and run compile modules with correct install
path.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=/media/sdb2 modules
</span><span class='line'>sudo make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- INSTALL_MOD_PATH=/media/sdb2 modules_install
</span><span class='line'>sudo cp /media/sdb1/kernel.img /media/sdb1/kernel-backup.img
</span><span class='line'>sudo cp arch/arm/boot/Image /media/sdb1/kernel.img
</span><span class='line'>sudo umount /dev/sdb1
</span><span class='line'>sudo umount /dev/sdb2</span></code></pre></td></tr></table></div></figure>


<p>Now we can connect card to RPi and boot it to check if new kernel was correctly
loaded.</p>

<h3>Running usbip on RPi</h3>

<p>Now on RPi we can load modules needed for <code>usbipd</code> and run it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo modprobe usbip-core
</span><span class='line'>sudo modprobe usbip-host
</span><span class='line'>sudo usbipd -D</span></code></pre></td></tr></table></div></figure>


<p>To what USB devices are connected to our system we can use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usbip list -l</span></code></pre></td></tr></table></div></figure>


<p>This will show output similar to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Local USB devices
</span><span class='line'>=================
</span><span class='line'> - busid 1-1 (0424:9514)
</span><span class='line'>         1-1:1.0 -&gt; hub
</span><span class='line'>
</span><span class='line'> - busid 1-1.1 (0424:ec00)
</span><span class='line'>         1-1.1:1.0 -&gt; smsc95xx
</span><span class='line'>
</span><span class='line'> - busid 1-1.2 (0951:1625)
</span><span class='line'>         1-1.2:1.0 -&gt; usbip-host</span></code></pre></td></tr></table></div></figure>


<p><code>busid 1-1.2 (0951:1625)</code> is my Kingstone pendrive. If you are unsure which
busid is for device that you want to share compare device id and vendor id with
output of <code>lsusb</code>. To bind device to <code>usbip-host.ko</code> we should use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pi@raspberrypi ~ $ sudo usbip --debug bind -b 1-1.2
</span><span class='line'>usbip: debug: /build/linux-tools-TqR1ks/linux-tools-3.2.17/drivers/staging/usbip/userspace/src/usbip.c:134:[run_command] running command: `bind'
</span><span class='line'>usbip: debug: /build/linux-tools-TqR1ks/linux-tools-3.2.17/drivers/staging/usbip/userspace/src/usbip_bind.c:162:[unbind_other] 1-1.2:1.0 -&gt; usb-storage
</span><span class='line'>usbip: debug: /build/linux-tools-TqR1ks/linux-tools-3.2.17/drivers/staging/usbip/userspace/src/utils.c:65:[modify_match_busid] write "add 1-1.2" to /sys/bus/usb/drivers/usbip-host/match_busid
</span><span class='line'>bind device on busid 1-1.2: complete</span></code></pre></td></tr></table></div></figure>


<p>As you can see communication to <code>usbip-host</code> module is through writing into
sysfs file.</p>

<p><em>NOTE</em> : if you will try to bind device without root privileges or when modules
are not loaded you will get errors like below:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pi@raspberrypi ~ $ usbip bind -b 1-1.2
</span><span class='line'>usbip: error: could not unbind driver from device on busid 1-1.2
</span><span class='line'>pi@raspberrypi ~ $ sudo usbip bind -b 1-1.2
</span><span class='line'>usbip: error: unable to bind device on 1-1.2</span></code></pre></td></tr></table></div></figure>


<h3>usbip &ndash; client side</h3>

<p>Our device should wait for communication. Let&rsquo;s go to client side of our LAN
and try to check if we can use our USB device. To check if device is available:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[22:29:37] pietrushnic:~ $ sudo usbip list -r 192.168.1.3
</span><span class='line'>Exportable USB devices
</span><span class='line'>======================
</span><span class='line'> - 192.168.1.3
</span><span class='line'>      1-1.2: Kingston Technology : DataTraveler 101 II (0951:1625)
</span><span class='line'>           : /sys/devices/platform/bcm2708_usb/usb1/1-1/1-1.2
</span><span class='line'>           : (Defined at Interface level) (00/00/00)
</span><span class='line'>           :  0 - Mass Storage / SCSI / Bulk-Only (08/06/50)</span></code></pre></td></tr></table></div></figure>


<p>Where <code>192.168.1.3</code> is an IP of RPi. Everything seems to be ok. So let&rsquo;s try to
attach it and do some test:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[22:31:11] pietrushnic:~ $ sudo usbip attach -r 192.168.1.3 -b 1-1.2 
</span><span class='line'>usbip: error: open vhci_driver
</span><span class='line'>usbip: error: query</span></code></pre></td></tr></table></div></figure>


<p>Oops, looks like we don&rsquo;t have driver for client side. Let&rsquo;s see if it is
compiled in my kernel as module:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grep USBIP /boot/config-`uname -r`
</span><span class='line'>CONFIG_USBIP_CORE=m
</span><span class='line'>CONFIG_USBIP_VHCI_HCD=m
</span><span class='line'>CONFIG_USBIP_HOST=m
</span><span class='line'># CONFIG_USBIP_DEBUG is not set</span></code></pre></td></tr></table></div></figure>


<p>Great so we can load <code>vhci-hcd</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo modprobe vhci-hcd</span></code></pre></td></tr></table></div></figure>


<p>And attach pendriver from RPi. What we have to use is IP address and bus id.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usbip attach -r 192.168.1.3 -b 1-1.2</span></code></pre></td></tr></table></div></figure>


<p>In dmesg we can find information about our device.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[  676.126820] usbip_core: module is from the staging directory, the quality is unknown, you have been warned.
</span><span class='line'>[  676.127246] usbip_core: USB/IP Core v1.0.0
</span><span class='line'>[  676.127964] vhci_hcd: module is from the staging directory, the quality is unknown, you have been warned.
</span><span class='line'>[  676.128336] vhci_hcd vhci_hcd: USB/IP Virtual Host Controller
</span><span class='line'>[  676.128341] vhci_hcd vhci_hcd: new USB bus registered, assigned bus number 5
</span><span class='line'>[  676.128493] usb usb5: New USB device found, idVendor=1d6b, idProduct=0002
</span><span class='line'>[  676.128495] usb usb5: New USB device strings: Mfr=3, Product=2, SerialNumber=1
</span><span class='line'>[  676.128497] usb usb5: Product: USB/IP Virtual Host Controller
</span><span class='line'>[  676.128498] usb usb5: Manufacturer: Linux 3.14-2-amd64 vhci_hcd
</span><span class='line'>[  676.128499] usb usb5: SerialNumber: vhci_hcd
</span><span class='line'>[  676.128603] hub 5-0:1.0: USB hub found
</span><span class='line'>[  676.128607] hub 5-0:1.0: 8 ports detected
</span><span class='line'>[  676.128732] vhci_hcd: USB/IP 'Virtual' Host Controller (VHCI) Driver v1.0.0
</span><span class='line'>[  676.228522] vhci_hcd: changed 0
</span><span class='line'>[  694.052076] vhci_hcd vhci_hcd: rhport(0) sockfd(3) devid(65540) speed(3)
</span><span class='line'>[  694.052289] vhci_hcd: changed 1
</span><span class='line'>[  694.158844] vhci_hcd: changed 0
</span><span class='line'>[  694.267024] usb 5-1: new high-speed USB device number 2 using vhci_hcd
</span><span class='line'>[  694.491154] usb 5-1: new high-speed USB device number 3 using vhci_hcd
</span><span class='line'>[  694.715339] usb 5-1: new high-speed USB device number 4 using vhci_hcd
</span><span class='line'>[  694.715356] usb 5-1: SetAddress Request (4) to port 0
</span><span class='line'>[  694.758246] usb 5-1: New USB device found, idVendor=0951, idProduct=1625
</span><span class='line'>[  694.758251] usb 5-1: New USB device strings: Mfr=1, Product=2, SerialNumber=3
</span><span class='line'>[  694.758252] usb 5-1: Product: DT 101 II
</span><span class='line'>[  694.758254] usb 5-1: Manufacturer: Kingston
</span><span class='line'>[  694.758255] usb 5-1: SerialNumber: 001CC0EC3519EA51A0000017
</span><span class='line'>[  694.809487] usb-storage 5-1:1.0: USB Mass Storage device detected
</span><span class='line'>[  694.809582] scsi6 : usb-storage 5-1:1.0
</span><span class='line'>[  694.809660] usbcore: registered new interface driver usb-storage
</span><span class='line'>[  695.816239] scsi 6:0:0:0: Direct-Access     Kingston DT 101 II        PMAP PQ: 0 ANSI: 0 CCS
</span><span class='line'>[  695.816627] sd 6:0:0:0: Attached scsi generic sg2 type 0
</span><span class='line'>[  695.825894] sd 6:0:0:0: [sdb] 7815168 512-byte logical blocks: (4.00 GB/3.72 GiB)
</span><span class='line'>[  695.833602] sd 6:0:0:0: [sdb] Write Protect is off
</span><span class='line'>[  695.833616] sd 6:0:0:0: [sdb] Mode Sense: 03 41 00 00
</span><span class='line'>[  695.841427] sd 6:0:0:0: [sdb] No Caching mode page found
</span><span class='line'>[  695.841440] sd 6:0:0:0: [sdb] Assuming drive cache: write through
</span><span class='line'>[  695.883028] sd 6:0:0:0: [sdb] No Caching mode page found
</span><span class='line'>[  695.883044] sd 6:0:0:0: [sdb] Assuming drive cache: write through
</span><span class='line'>[  695.903869]  sdb: sdb1 sdb2 &lt; sdb5 &gt;
</span><span class='line'>[  695.941208] sd 6:0:0:0: [sdb] No Caching mode page found
</span><span class='line'>[  695.941211] sd 6:0:0:0: [sdb] Assuming drive cache: write through
</span><span class='line'>[  695.941214] sd 6:0:0:0: [sdb] Attached SCSI removable disk</span></code></pre></td></tr></table></div></figure>


<p>Device show correct informations in <code>lsusb</code> output and <code>/proc/partitions</code>.</p>

<h2>Testing usbip</h2>

<p>From technical paper that I mentioned above I understand that probably the most
important factor for <code>usbip</code> performance is latency. Simplest method to emulate
WAN delays is <code>tc</code> from <code>iproute2</code> package. It is available by as default tool
in Raspbian:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tc qdisc add dev eth0 root netem delay 100ms #add device and set delay
</span><span class='line'>sudo tc qdisc change dev eth0 root netem delay 10ms #change delay</span></code></pre></td></tr></table></div></figure>


<p>To test read speed I used <code>dd</code> by simply:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> sudo dd if=/dev/sdb of=/dev/null bs=1M count=5</span></code></pre></td></tr></table></div></figure>


<p>So I tried few values with my Kingston pendrive:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   0ms : 1.7 MB/s
</span><span class='line'>  10ms : 968 kB/s
</span><span class='line'>  20ms : 652 kB/s
</span><span class='line'>  30ms : 495 kB/s
</span><span class='line'>  40ms : 394 kB/s
</span><span class='line'>  50ms : 344 kB/s
</span><span class='line'> 100ms : 177 kB/s
</span><span class='line'> 200ms : 86.0 kB/s
</span><span class='line'> 300ms : 67.5 kB/s
</span><span class='line'> 400ms : 38.1 kB/s
</span><span class='line'> 500ms : 30.6 kB/s
</span><span class='line'>1000ms : 15.9 kB/s</span></code></pre></td></tr></table></div></figure>


<p>And something from <code>gnuplot</code> noob:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/usbip-rate.png"><img src="http://pietrushnic.github.io/assets/images/usbip-rate.png" alt="" /></a></p>

<h3>Cleanup</h3>

<p>Before we can disconnect device from RPi we have do few things. First detach
port to which remote device was connected. Which port ?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usbip port</span></code></pre></td></tr></table></div></figure>


<p>Next detach device you want to disconnect:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usbip detach -p 0</span></code></pre></td></tr></table></div></figure>


<p>Finally on RPi you can unbind device:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usbip unbind -b 1-1.2</span></code></pre></td></tr></table></div></figure>


<p>Now device can be removed.</p>

<h2>Other devices</h2>

<p>With various results I tried other devices.</p>

<h3>Android phone</h3>

<p>I also tried to connect my Samsung GT-I9070. Unfortunately without luck:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hub 5-0:1.0: Cannot enable port 1.  Maybe the USB cable is bad?
</span><span class='line'>hub 5-0:1.0: unable to enumerate USB device on port 1</span></code></pre></td></tr></table></div></figure>


<p>I think it could be related with fact that my smartphone expose multiple
devices over one USB connection. What can be observed on <code>usbip</code> list:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> - busid 1-1.2 (04e8:6860)
</span><span class='line'>         1-1.2:1.0 -&gt; unknown
</span><span class='line'>         1-1.2:1.1 -&gt; cdc_acm
</span><span class='line'>         1-1.2:1.2 -&gt; cdc_acm</span></code></pre></td></tr></table></div></figure>


<p>I see this as opportunity to debug, understand
and fix the driver.</p>

<h3>Arduino</h3>

<p>There was no problem with Arduino. I was even able to program it successfully.
Unfortunately to big delay (in my case 300ms) cause software errors:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Binary sketch size: 1,056 bytes (of a 30,720 byte maximum)
</span><span class='line'>
</span><span class='line'>avrdude: stk500_getparm(): (a) protocol error, expect=0x14, resp=0x14
</span><span class='line'>
</span><span class='line'>avrdude: stk500_getparm(): (a) protocol error, expect=0x14, resp=0x01
</span><span class='line'>avrdude: stk500_initialize(): (a) protocol error, expect=0x14, resp=0x10
</span><span class='line'>avrdude: initialization failed, rc=-1
</span><span class='line'>         Double check connections and try again, or use -F to override
</span><span class='line'>         this check.</span></code></pre></td></tr></table></div></figure>


<h2>Summary</h2>

<p>Looks like <code>usbip</code> is usable in low delay network. It would be great to test it
in real WAN. It is possible to use <code>usbip</code> with more sophisticated devices but
potential driver tweaking is required. As a telecommunication graduate I cannot
say about possible improvements in queue algorithms, like adaptive queueing
which depends on data transfer profile. It was interesting experience to play
with <code>usbip</code> and probably I will back to it especially to testing part of this
post.</p>

<p>If you have questions, suggestions or comments please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coreboot for QEMU armv7 (vexpress-a9) emulated mainboard]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/08/07/debugging-coreboot-for-qemu-armv7-vexpress-a9-emulated-mainboard/"/>
    <updated>2014-08-07T23:08:39+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/08/07/debugging-coreboot-for-qemu-armv7-vexpress-a9-emulated-mainboard</id>
    <content type="html"><![CDATA[<p>Recently I came back to look into coreboot. Mainly because low level is fun and
skills related to firmware (even coreboot) starting get attention on freelance
portals (<a href="http://bit.ly/1sBSybZ">first odesk job</a>, <a href="http://bit.ly/1sBSR6F">second odesk job</a>).
 I was surprised that under the wings of Google
coreboot team start to support ARM (BTW ARM programming is IMHO next great
skill to learn). So I cloned latest, code compiled QEMU armv7 mainboard model and
tried to kick it in latest qemu-system-arm. Unfortunately it didn&rsquo;t boot. Below
you can find my TL;DR debugging story.</p>

<h2>coreboot qemu-armv7 mainboard compilation &ndash; very quick steps</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone http://review.coreboot.org/p/coreboot
</span><span class='line'>cd coreboot
</span><span class='line'>git submodule update --init --checkout
</span><span class='line'>make menuconfig</span></code></pre></td></tr></table></div></figure>


<p>Set: <code>Mainboard -&gt; Mainboard model -&gt; QEMU armv7 (vexpress-a9)</code></p>

<p>NOTE: To prevent annoying warning about XML when running gdb from coreboot
crossgcc utilities:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>warning: Can not parse XML target description; XML support was disabled at compile time</span></code></pre></td></tr></table></div></figure>


<p><code>libexpat1-dev</code> should be installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libexpat1-dev
</span><span class='line'>cd util/crossgcc
</span><span class='line'>./buildgcc -y -j 8 -p armv7 -G
</span><span class='line'>cd ../..
</span><span class='line'>make</span></code></pre></td></tr></table></div></figure>


<p><code>buildgcc</code> will provide armv7 toolchain with debugger (<code>-G</code>) and compilation
will use 8 parallel jobs.</p>

<h2>qemu-system-arm compilation &ndash; very quick steps</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://git.qemu.org/qemu.git
</span><span class='line'>cd qemu
</span><span class='line'>git submodule update --init --checkout
</span><span class='line'>make clean && ./configure --target-list=arm-softmmu && make -j8
</span><span class='line'>sudo make install</span></code></pre></td></tr></table></div></figure>


<h2>Debugging hint</h2>

<p>Use good gdbinit, so with every instruction executed gdb will automatically
provide most useful informations. IMHO good choice is <code>fG!</code> gdbinit shared on
<a href="https://github.com/gdbinit/Gdbinit">github</a>. It contain support for ARM and
x86. To switch to ARM mode inside gdb simple use <code>arm</code> command. Output looks
pretty awesome:</p>

<p><a class="fancybox" rel="group" href="http://pietrushnic.github.io/assets/images/gdbinit.png"><img src="http://pietrushnic.github.io/assets/images/gdbinit.png" alt="" /></a></p>

<h2>Noob dead end</h2>

<p>Command for running qemu that I found in early qemu-armv7 commit log:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-system-arm -M vexpress-a9 -m 1024M -nographic -kernel build/coreboot.rom</span></code></pre></td></tr></table></div></figure>


<p>It ends with qemu error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu: fatal: Trying to execute code outside RAM or ROM at 0x04000000
</span><span class='line'>
</span><span class='line'>R00=00000002 R01=00000000 R02=00000000 R03=00000000
</span><span class='line'>R04=00000000 R05=00000000 R06=00000000 R07=00000000
</span><span class='line'>R08=00000000 R09=00000000 R10=00000000 R11=00000000
</span><span class='line'>R12=00000000 R13=0007fed0 R14=6001032f R15=04000000
</span><span class='line'>PSR=600000d3 -ZC- A svc32
</span><span class='line'>(...)</span></code></pre></td></tr></table></div></figure>


<p>At the beginning I thought that it is a mistake so I tried:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-system-arm -M vexpress-a9 -m 1024M -nographic -bios build/coreboot.rom</span></code></pre></td></tr></table></div></figure>


<p>What ends with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu: fatal: Trying to execute code outside RAM or ROM at 0xfffffffe
</span><span class='line'>
</span><span class='line'>R00=00000002 R01=ffffffff R02=ffffffff R03=ffffffff
</span><span class='line'>R04=ffffffff R05=ffffffff R06=ffffffff R07=ffffffff
</span><span class='line'>R08=00000000 R09=ffffffff R10=ffffffff R11=ffffffff
</span><span class='line'>R12=00000000 R13=0007fed0 R14=0000032f R15=fffffffe
</span><span class='line'>PSR=600000f3 -ZC- T svc32</span></code></pre></td></tr></table></div></figure>


<p>Obviously qemu complains on value in R15 (PC &ndash; Program Counter), which is the
address of current instruction (like EIP in x86).</p>

<p>Stepping through assembler instructions using cross-compiled debugger
(<code>util/crossgcc/xgcc/bin/armv7-a-eabi-gdb</code>) points to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0x6001024f:  ldmia.w sp!, {r2, r3, r4, r5, r6, r7, r9, r10, r11, pc}</span></code></pre></td></tr></table></div></figure>


<p><code>ldmia</code> will load from stack values of all given registers. This cause that PC
goes to 0x0 and then run instruction from zeroed memory, which in ARM
instructions means:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>andeq   r0, r0, r0</span></code></pre></td></tr></table></div></figure>


<p>It happens till PC reach 0x4000000 which is out of &lsquo;RAM or ROM&rsquo; for qemu.
Unfortunately there is no sign about <code>ldmia</code> instruction with above range of
registers in coreboot and qemu code.</p>

<h2>Bisection</h2>

<p>I knew that at some point qemu worked with coreboot. I tried few versions and
it leads me to some commit between <code>v2.1.0-rc1</code> and <code>v2.1.0-rc0</code>. For <code>-kernel</code>
switch I was able to narrow down problem to one commit that change
<code>VE_NORFLASHALIAS</code> option for vexpress-a9 to 0
(<a href="http://git.qemu.org/?p=qemu.git;a=commit;h=6ec1588e09770ac7e9c60194faff6101111fc7f0">6ec1588</a>).
It looks like for vexpress-a9 qemu place kernel at 0x60000000
(vexpress.highmem), which is aliased to range 0x0-0x3ffffff.
<code>VE_NORFLASHALIAS=0</code> cause mapping of vexpress.flash0 to the same region as
kernel and because flash (<code>-bios</code>) was not added we have empty space (all
zeros) what gives <code>andeq r0, r0, r0</code>.</p>

<p>Right now I have working version of coreboot but only with <code>-kernel</code> and
<code>VE_NORFLASHALIAS=-1</code> set in hw/arm/vexpress.c. The main questions are:</p>

<ul>
<li>what is the correct memory map for qemu-armv7 and how coreboot should be mapped ?</li>
<li>what&rsquo;s going on with coreboot or qemu that I can&rsquo;t go through bootblock ?</li>
</ul>


<h2>Debugging</h2>

<p>I tried to debug coreboot executed from flash:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>qemu-system-arm -M vexpress-a9 -m 1024M -nographic -bios build/coreboot.rom -s -S</span></code></pre></td></tr></table></div></figure>


<p>Coreboot as UEFI has few phases. For UEFI we distinguish SEC, PEI, DXE and BDS
(there are also TSL, RT and AL, but not important for this considerations). On
coreboot side we have bootblock, romstage, ramstage and payload.</p>

<h3>qemu-armv7 bootblock failure</h3>

<p>qemu-armv7 booting procedure start from <code>_rom</code> section which contain hardcoded
jump to <code>reset</code> procedure. After that go through few methods like on below flow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_rom
</span><span class='line'>|-&gt; reset
</span><span class='line'>    |-&gt; init_stack_loop
</span><span class='line'>        |-&gt; call_bootblock
</span><span class='line'>            |-&gt; main
</span><span class='line'>                |-&gt; armv7_invalidate_caches
</span><span class='line'>                    |-&gt; icache_invalidate_all
</span><span class='line'>                    |-&gt; dcache_invalidate_all
</span><span class='line'>                      |-&gt; dcache_foreach</span></code></pre></td></tr></table></div></figure>


<p>At the end of <code>dcache_foreach</code> we experience failure because <code>ldmia</code>
instruction tries to restore registers from stack, which should be stored at
the beginning of <code>dcache_foreach</code>, by:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stmdb  sp!, {r0, r1, r4, r5, r6, r7, r9, sl, fp, lr}</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately for some reason stack doesn&rsquo;t contain any reasonable values (all
0xffffffff) after <code>stmdb</code>. Why is that ?</p>

<h3>Obvious things are not so obvious</h3>

<p>As I point above everything seems to be related with memory map for
vexpress-a9. I wrote question to qemu developers mailing list describing all
the problems. You can read it
<a href="http://lists.nongnu.org/archive/html/qemu-devel/2014-08/msg02599.html">here</a>.
So the answer is that ARM Versatile Express boards in general have two
different memory maps. First is legacy with RAM in low memory and second is
modern with flash in low memory instead of RAM. Since qemu <code>v2.1.0</code> modern
memory map was used. That&rsquo;s why I saw change in behavior. Obviously flash in
qemu is read only, so no matter what pushing on stack didn&rsquo;t work.</p>

<h3>coreboot stack location fix</h3>

<p>I though that fix would be easy. One thing that I have to do is change stack
address. The question is where to place the stack ? So I took a look at qemu
memory map:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(qemu) info mtree
</span><span class='line'>(...)
</span><span class='line'>0000000040000000-0000000043ffffff (prio 0, R-): vexpress.flash0
</span><span class='line'>0000000044000000-0000000047ffffff (prio 0, R-): vexpress.flash1
</span><span class='line'>0000000048000000-0000000049ffffff (prio 0, RW): vexpress.sram
</span><span class='line'>000000004c000000-000000004c7fffff (prio 0, RW): vexpress.vram
</span><span class='line'>000000004e000000-000000004e0000ff (prio 0, RW): lan9118-mmio
</span><span class='line'>0000000060000000-000000009fffffff (prio 0, RW): vexpress.highmem</span></code></pre></td></tr></table></div></figure>


<p>SRAM is temporary storage where I decide to put stack. The change in coreboot
looks like below:</p>

<figure class='code'><figcaption><span>src/mainboard/emulation/qemu-armv7/Kconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">config</span> <span class="n">STACK_TOP</span>
</span><span class='line'>  <span class="n">hex</span>
</span><span class='line'>  <span class="k">default</span> <span class="mh">0x4803ff00</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="n">STACK_BOTTOM</span>
</span><span class='line'>  <span class="n">hex</span>
</span><span class='line'>  <span class="k">default</span> <span class="mh">0x48000000</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span> <span class="n">STACK_SIZE</span>
</span><span class='line'>  <span class="n">hex</span>
</span><span class='line'>  <span class="k">default</span> <span class="mh">0x0003ff00</span>
</span></code></pre></td></tr></table></div></figure>


<p>I changed STACK_TOP and STACK_BOTTOM.</p>

<p>Unfortunately still I was unable to boot coreboot on vexpress-a9. Situation
improved because stack start to work correctly and accept push and pop data
to/from, but next problem occurs in <code>init_default_cbfs_media</code>.</p>

<h3>init_default_cbfs_media problem</h3>

<p>As CBFS specification explains:</p>

<blockquote><p>CBFS is a scheme for managing independent chunks of data in a system ROM.</p><footer><strong>Jordan Crouse</strong> <cite><a href='http://review.coreboot.org/gitweb?p=coreboot.git;a=blob;f=documentation/cbfs.txt;h=7ecc9014a1cb2e0a86bbbf514e17f6b0360b9c0c;hb=HEAD'>review.coreboot.org/&hellip;</a></cite></footer></blockquote>


<p>Default CBFS media initialization for qemu-armv7 leads to
<code>init_emu_rom_cbfs_media</code> that fills <code>cbfs_media</code> structures with function
pointers that help to operate on CBFS.</p>

<figure class='code'><figcaption><span>src/mainboard/emulation/qemu-armv7/media.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">init_emu_rom_cbfs_media</span><span class="p">(</span><span class="k">struct</span> <span class="n">cbfs_media</span> <span class="o">*</span><span class="n">media</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">media</span><span class="o">-&gt;</span><span class="n">open</span> <span class="o">=</span> <span class="n">emu_rom_open</span><span class="p">;</span>
</span><span class='line'>  <span class="n">media</span><span class="o">-&gt;</span><span class="n">close</span> <span class="o">=</span> <span class="n">emu_rom_close</span><span class="p">;</span>
</span><span class='line'>  <span class="n">media</span><span class="o">-&gt;</span><span class="n">map</span> <span class="o">=</span> <span class="n">emu_rom_map</span><span class="p">;</span>
</span><span class='line'>  <span class="n">media</span><span class="o">-&gt;</span><span class="n">unmap</span> <span class="o">=</span> <span class="n">emu_rom_unmap</span><span class="p">;</span>
</span><span class='line'>  <span class="n">media</span><span class="o">-&gt;</span><span class="n">read</span> <span class="o">=</span> <span class="n">emu_rom_read</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem was that pointers were relative to bootblock base address
<code>0x00010000</code> and <code>-bios</code> option maps coreboot.rom from address <code>0x0</code>. This
leads to change in bootblock base address to <code>0x0</code>:</p>

<figure class='code'><figcaption><span>src/mainboard/emulation/qemu-armv7/Kconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">config</span> <span class="n">BOOTBLOCK_BASE</span>
</span><span class='line'>  <span class="n">hex</span>
</span><span class='line'>  <span class="k">default</span> <span class="mh">0x00000000</span>
</span></code></pre></td></tr></table></div></figure>


<p>This solve other issue not mentioned till now. I didn&rsquo;t know why I can&rsquo;t load
symbols for bootblock using <code>add-symbol-file</code> in gdb. Of course reason was
bootblock didn&rsquo;t start at 0x0 but at 0x10000. Since this moment I could debug
bootblock using lines of C code, by simply:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gdb$ add-symbol-file build/cbfs/fallback/bootblock.debug 0x0
</span></code></pre></td></tr></table></div></figure>


<p>It was not the end because another error popped up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Bad ram pointer 0x3b8
</span></code></pre></td></tr></table></div></figure>


<h3>memcpy during CBFS decompression</h3>

<p>Problem was with storing registers <code>stmia</code> during memcpy. Backtrace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>#0  memcpy () at src/arch/armv7/memcpy.S:64
</span><span class='line'>#1  0x000015b2 in cbfs_decompress (algo=&lt;optimized out&gt;, src=&lt;optimized out&gt;, dst=&lt;optimized out&gt;, len=0x3310) at src/lib/cbfs_core.c:227
</span><span class='line'>#2  0x00001702 in cbfs_load_stage (media=media@entry=0x0 &lt;_start&gt;, name=name@entry=0x2260 &quot;fallback/romstage&quot;) at src/lib/cbfs.c:137
</span><span class='line'>#3  0x00002236 in main () at src/arch/armv7/bootblock_simple.c:63
</span></code></pre></td></tr></table></div></figure>


<p>For some reason R0 (to which we store), contain strange address 0x10000. No
value was stored in this memory range, because again it was read only flash.
Address is passed from upper layers &ndash; <code>cbfs_get_file_content</code>. During debugging
I realize that this address means <code>ROMSTAGE_BASE</code>. So I changed <code>ROMSTAGE_BASE</code>
to somewhere in SRAM.</p>

<figure class='code'><figcaption><span>src/mainboard/emulation/qemu-armv7/Kconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">config</span> <span class="n">ROMSTAGE_BASE</span>
</span><span class='line'>  <span class="n">hex</span>
</span><span class='line'>  <span class="k">default</span> <span class="mh">0x48040000</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I saw when trying to boot coreboot with this fix was wonderful log proved
that coreboot boots without problems.</p>

<h2>Conclusion</h2>

<p>Above debugging session was all about memory map. It was really fun to
experience all those issues because I had to understand lot of ARM assembly
instructions, track memory, read the spec, read coreboot and qemu code. It gave
me a lot of good experience. If you have any questions or comments please let
me know. And finally what is most important it was next thing done on my list.</p>

<p>I think next challenge could be experiment with Linux kernel booting. Coreboot
can boot kernel directly or through payload with bootloader.</p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux (Debian Wheezy) on Lenovo y510p]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/05/16/debian-wheezy-on-lenovo-y510p/"/>
    <updated>2014-05-16T22:36:27+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/05/16/debian-wheezy-on-lenovo-y510p</id>
    <content type="html"><![CDATA[<p>After long analysis I decide to buy new laptop. I had about $1000
(or 3000PLN) and most important things to me were:</p>

<ul>
<li>i7 CPU &ndash; because of performance (of course at least 4700 series)</li>
<li>SSD &ndash; again performance</li>
<li>17.3” &ndash; working space</li>
<li>no OS/FreeDos/Linux &ndash; I will not pay additional fee to M$ for system that I won’t use</li>
<li>Full HD resolution</li>
<li>at least 8GB RAM</li>
<li>non-glare display</li>
</ul>


<p>First I realize that my budget is to small for such a hardware. Second as always
we have to deal with trade-offs, so you cannot have everything. In final round I had two candidates <a href="http://www.notebookcheck.net/Review-Acer-Aspire-V3-772G-747A321-Notebook.93916.0.html">Acer Aspire V7-772G</a>
and <a href="http://www.notebookcheck.net/Review-Lenovo-IdeaPad-Y510p-Notebook.97470.0.html">Lenovo IdeaPad y510p</a>.</p>

<p>I resign from using 17.3&#8221; display because most of them in my budget range were
glare and without Full HD support. After reading Newegg reviews about both
laptops I choose Lenovo. It is better brand with better design (ie. metal lid),
other parameters, except RAM expansion possibilities, are the same.</p>

<h2>First boot</h2>

<p>Today I have it on my desk and trying to install Debian Wheezy. I put Debian
netinst in drive and get wonderful UEFI message :)</p>

<p><img class="center" src="http://pietrushnic.github.io/assets/images/cdrom-blocked.jpg" width="450" height="450" title="image" alt="images"></p>

<p>I figure out that I have to disable my last days favourite feature from M$ &ndash;
namely Secure Boot. I was surprised when I realized that there is no hot key to
enter UEFI Setup. Instead of hot key Lenovo decide to put small button (called
Novo Button) on the side of laptop near power socket. Quite interesting idea
when taking into consideration that InsydeH20 Setup Utility doesn’t provide
much of functions, so we end with entering setup maybe dozen of times during laptop
lifetime. Also I think it can improve boot time a little bit because UEFI don’t
have to poll for user input during hot key pushing time window.</p>

<h2>Disable secure thing</h2>

<p>So to disable this <code>feature-that-name-should-be-doomed</code> you have to enter Setup
using Novo Button and switch to Security tab. At first glance you can find
option called <code>Scure Boot</code> set to <code>[Enabled]</code>. Description of this option said
<code>Enabl or Disable Secure Boot support</code>. Don’t be naive this button won’t do
what you want. To disable this devil work you have to push enter on <code>Reset to Seupt Mode</code>
option, which cleans keys database. Don&rsquo;t panic your database of
vendor keys will not disappear you can restore it anytime you want using
<code>Restore Factory Keys</code>. BTW I didn&rsquo;t found any information about it in <code>User Manual</code>.</p>

<p><img class="center" src="http://pietrushnic.github.io/assets/images/uefi-security.jpg" width="640" height="400" title="image" alt="images"></p>

<h2>Installation</h2>

<p>Next surprise after booting netinst (it works in UEFI mode, so no need to
switching to legacy) is that Debian <code>7.5.0</code> was unable to find driver for
on-board LAN card.So I installed my Debian over wireless Intel card. Wheezy use
<code>3.2.0</code> kernel which doesn&rsquo;t not contain <code>alx</code> driver with support for Qualcomm
Atheros QCA8171.</p>

<p>Note that there is possibility to load new driver from pendrive during
installation. But best way would using netinst with Jessie or Sid. You can get it <a href="http://www.debian.org/devel/debian-installer/">here</a>.
I with to knew that before I started to fight with stable version.</p>

<h2>Xorg crash</h2>

<p>After all above I booted my favourite distro and it welcomes me with blinking
cursor and Xorg crashed because of:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(EE) VESA(0): V_BIOS address 0x0 out of range
</span><span class='line'>(EE) Screen(s) found, but none have a usable configuration</span></code></pre></td></tr></table></div></figure>


<p>During long an unequal battle, which was full of google hits. I figured out
that best way to improve awful situation in Debian stable for y510p is to
upgrade to Sid (unstable). Of course I messed up this because I tried move from
stable to unstable skipping testing.</p>

<p>I found on Debian pages that upgrade to <code>unstable</code> should be performed through
<code>testing</code> version. This mistake cost me time, because I have to install OS
second time after breaking my Gnome installation.</p>

<h2>Final considerations</h2>

<p>Upgrade to latest kernel version helps a lot but there are still many things to
do. Right now I&rsquo;m using Intel integrated graphics. It would be great to enable
second card GT755M and try Optimus technology. Especially when I would like to
rest from coding and try to relax playing Heroes Of Newearth. I also think
about running CUDA on my setup. Next thing for me will be testing vitalization
performance. If I will find reliable method to enable GT 755M on Debian I will
let you know.</p>

<p>I compiled edk2 and linux kernel. I see big difference in performance and
that&rsquo;s most important thing to me.</p>

<p>Some of you will say that Linux is a piece of $!#@, but for me this is very
good opportunity to verify my skills and contribute to community. During my
research about y510p I found also complains from Windows users that not all
works smoothly (Optimus), so there are also cons on the other side. Finally if
you won&rsquo;t deal with problems simply use Mint or Ubuntu there is much better
support there. By the way I think that I&rsquo;m immune to problems with my operating
system ;)</p>

<p><img class="center" src="http://pietrushnic.github.io/assets/images/lenovo-y510p.jpg" width="640" height="400" title="image" alt="images"></p>

<p>Thanks for reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little bit of fresh air]]></title>
    <link href="http://pietrushnic.github.io/blog/2014/04/13/a-little-bit-of-fresh-air/"/>
    <updated>2014-04-13T19:55:18+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2014/04/13/a-little-bit-of-fresh-air</id>
    <content type="html"><![CDATA[<p>It is over 9 months since my last post. As you see since then I refreshed look
and feel of my blog a little bit. Theme was changed to
<a href="https://github.com/lucaslew/whitespace">whitespace</a>, because of my
minimalistic inspiration induced by <a href="http://www.kaikkonendesign.fi/">Tommi Kaikkonen</a>. Meanwhile AddThis improved their
products offer by <a href="https://www.addthis.com/get/smart-layers">Smart Layers</a> and
you can see how they works on left and upper right. I hope that thanks to this
improvement sharing valuable content would be easier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improve productivity with Goolge history using bookmarks and Chrome extensions]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/07/30/how-to-use-google-search-activity-to-improve-productivity/"/>
    <updated>2013-07-30T02:40:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/07/30/how-to-use-google-search-activity-to-improve-productivity</id>
    <content type="html"><![CDATA[<p class=intro>
The idea of this post is very simple (as usually)  and I wonder why I didn&#8217;t thought
about it earlier. The point is to use history of your Google queries to improve
productivity. Most of things that we google can be replaced for example by browser
extensions, bookmarks or rss feeds. Thats how we can gain few additional free seconds on 
each google-type-click cycle.
</p>


<h2>Statistics</h2>

<p>Depending on different factors we spend a lot of time in browser. I cannot find
statistics for desktops but for mobile <a href="http://blog.flurry.com/bid/95723/Flurry-Five-Year-Report-It-s-an-App-World-The-Just-Web-Lives-in-It">Flurry</a>
researches are probably relevant enough. Simplifying this statistics and assuming that desktop market
is similar (it is probably to big simplification for some of you but IMHO it is
good for reflections on this blog):</p>

<ul>
<li>access Facebook, social networks (+18%, +6%)</li>
<li>play some games (<a href="http://allthingsd.com/20130325/a-look-ahead-at-gdc-its-mobile-vs-consoles-in-fight-for-game-developers-attention/">lets say 30%</a> of our 32% from Flurry report +13%)</li>
<li>web browsing time (+20%)</li>
<li>entertain</li>
<li>read news</li>
<li>use productivity tools</li>
</ul>


<p>We have at least 60 percent of our time in web browser. That&rsquo;s explain Google&rsquo;s
ideas about ChromOS and competition on browser market. Of course if take look a
this in short therm it look ridiculous but in long term it may be true. Even if this estimation
not match your behavior than ask yourself what percentage of time spent in
browser proves that improving productivity using google queries data does not
make sense ? Especially when doing this will not consume lot of your time.</p>

<h2>Productivity improvements based on my google history</h2>

<p>Below I will show how I improve my productivity using top queries and top sites
from <a href="https://history.google.com/history/">google history</a>. These are my results
that I found after choosing <code>Show more trends</code>:</p>

<h3>Top queries</h3>

<ol>
<li><code>ztm gdańsk</code>          &ndash; public transportation in my home town</li>
<li><code>usdpln</code>              &ndash; Polish Zloty to US Dollar rate</li>
<li><code>rozkład jazdy pkp</code>   &ndash; Polish state railways schedule</li>
<li><code>intc</code>                &ndash; Intel Corporation stocks rate</li>
<li><code>radio polska stacja</code> &ndash; Polish Internet radio station</li>
</ol>


<p>First of all I was surprised that I googled these things so many times. Especially
for point 5 :). To improve my daily routine with these data I use following
applications:</p>

<h3>Public transporation</h3>

<p>I used well known Polish application for public transpiration in biggest cities
&ndash; <a href="http://jakdojade.pl/">jakdojade.pl</a>. If you register on their page they give
you possibility to save travel directions, so I used it to save my common
destinations. Of course I put it on my bookmark bar as it is one of the most
used links.</p>

<h3>Currency ratio</h3>

<p>After thinking a while I realize that few requirements have to be met for me.
I need below fields:</p>

<ul>
<li>USD/PLN rate</li>
<li>EUR/PLN rate</li>
<li>gold ounce in US Dollars or XAUUSD</li>
<li>silver ounce in US Dollars or XAGUSD</li>
</ul>


<p>Unfortunately I was unhappy with choice presented on Chrome extension site
because I find that it is not easy to met my expectations &ndash; this is probably
market niche to explore. For today I choose <a href="https://chrome.google.com/webstore/detail/currency-converter/lncdobdbibdgoiohgnflmjajfphcnakg">Currency Converter</a>.
It has pretty good rate 4.5 star/444 opinions. One thing I don&rsquo;t like is that I
cannot set every field as I wish. Ratio always relate to recent changed position.
I also cannot display stock rate. That&rsquo;s why I will have to use one another
extension.</p>

<h3>Railways schedule</h3>

<p>Right now there is nothing I can do for this one than adding to bookmark bar as
a recently visited site.</p>

<h3>Stocks ticker</h3>

<p>There are plenty of extensions for Chrome and not a lot of really good one. I
found <a href="https://chrome.google.com/webstore/detail/stock-tracker/gphdmnilpmjaioploikmbpgkjfbagidf">Stock Tracker</a>
useful because it shows price in the icon on toolbar. But it is not free from
small bugs, for example INTC price is 4 digit with dot (00.00) and inadequate
font size selection causing that last digit is visible only in half, which cause
it hard to read. Good thing is that after pushing extension button on toolbar I
get stock chart and can see the trend.</p>

<h3>Top sites</h3>

<ol>
<li><code>stackoverflow.com</code></li>
<li><code>en.wikipedia.org</code></li>
<li><code>github.com</code></li>
<li><code>www.chessgames.com</code></li>
<li><code>pl.wikipedia.org</code></li>
</ol>


<p>Probably most of this pages are well known for you. What we can do with this
information ?</p>

<p>For
<a href="https://chrome.google.com/webstore/detail/lookup-companion-for-wiki/dhgpkiiipkgmckicafkhcihkcldbdeej">wiki</a> and <a href="https://chrome.google.com/webstore/detail/search-stackoverflow/gmdolelhfhbldobljhbhdgljbajhfilj">stackoverflow</a> there are extensions that help get search engine of
those sites. I found that usually google +stockoverflow works better than this
extension but it is worth a try. Wiki works without any problem and only our
habits can stop us by using it.</p>

<p>I use a lot of <a href="http://www.chess.com">chess.com</a> what I found useful with this
is <a href="https://chrome.google.com/webstore/detail/chesscom-notifier/khihkgdcfbjdnfgalkjnimbmofnhhpho">Chess.com Notifier</a>
it change color when some pending move in my games. Unfortunately I get to
<a href="http://www.chessgames.com">www.chessgames.com</a> though google looking for
particular position in game &ndash; right now I can&rsquo;t find easy way to improve this
other than paying for access to good database with defined interface or using my
own database.</p>

<p>I&rsquo;m sure that you have some clues how to improve your productivity using Google
history or you will find application for suggested plugins. Anyway, I whish you
good luck.</p>

<h2>At the end &ndash; the hard thing</h2>

<p>Switching our behaviors to something different is really hard thing. If we
always go to google and type well know query and trying to switch to something
new like replacing this behavior with clicking link or running extension could
be hard. This new action at the begging can be even slower than old. That&rsquo;s why
people resign after few tries. Most people also don&rsquo;t like changes as adage said
&ldquo;better the devil you know&rdquo;. However only those who try to change something in
their lives can reach success. And as story of Thomas Edison proves you have to
try.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x6: Root file system for embedded system]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/"/>
    <updated>2013-06-07T10:40:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#get-bb">Get and build BusyBox</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#fast-and-simple">Fast and simple</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#setting-up-kernel-through-nfs">Setting up kernel through NFS</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#verify-configuration">Verify Configuration</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#embedded-filesystem-tuning">Embedded filesystem tuning</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/#summary">Summary</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>To make our embedded linux work as virtual development platform we need some
environment after booting. There is many approaches to get working root file
system but I will use the easiest one as an exercise. I don&rsquo;t want to create full
embedded distribution (this is good plan for future works). Right now I will be
happy with simple initramfs based on <a href="http://busybox.net/">BusyBox</a>.</p>

<p>For all interested in creating own root filesystem there are few places where
you can find informations:</p>

<ul>
<li><a href="http://lwn.net/Articles/210046/">Embedded Linux: Small Root Filesystems</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt">ramfs-rootfs-initramfs</a></li>
<li><a href="http://processors.wiki.ti.com/index.php/Creating_a_Root_File_System_for_Linux_on_OMAP35x">Creating a Root File System for Linux on OMAP35x</a></li>
</ul>


<p><a id="get-bb"></a></p>

<h3>Get and build BusyBox</h3>

<p>Clone git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://git.busybox.net/busybox</span></code></pre></td></tr></table></div></figure>


<p><a id="fast-and-simple"></a></p>

<h3>Fast and simple</h3>

<p>Of course make sure to use correct toolchain. I made few notes about
Ubuntu/Linaro toolchain in <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#ubuntu-issues">previous post</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig</span></code></pre></td></tr></table></div></figure>


<p>Mark <code>Busybox Settings -&gt; Build Options -&gt; Build BusyBox as a static binary (no
shared libs)</code> option. Exit and save.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
</span><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- install
</span><span class='line'>cd _install/</span></code></pre></td></tr></table></div></figure>


<p><a id="setting-up-kernel-through-nfs"></a></p>

<h3>Setting up kernel through NFS</h3>

<p><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system">Previously</a> we prepared U-Boot
kenernel image with DHCP and rootfs which we want to expose over NFS. First lets start with NFS
configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install nfs-kernel-server</span></code></pre></td></tr></table></div></figure>


<p>I use simple <code>/etc/exports</code> configuration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/srv/homes 192.168.1.0/255.255.255.0(rw,sync,no_subtree_check,no_root_squash)</span></code></pre></td></tr></table></div></figure>


<p>Make sure that <code>/srv/homes</code> exist, if no than create it. After editing nfs
configuration file we have to restart NFS server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service nfs-kernel-server restart</span></code></pre></td></tr></table></div></figure>


<p><a id="verify-configuration"></a></p>

<h3>Verify configuration</h3>

<p>I assume that you go through all previous articles in this series.
To verify configuration we have to copy whole BusyBox <code>_install</code> directory to
known nfs location:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /srv/homes/rootfs
</span><span class='line'>sudo chmod 777 /srv/homes/rootfs
</span><span class='line'>cd /srv/homes/rootfs
</span><span class='line'>cp -R /path/to/busybox/_install/* .</span></code></pre></td></tr></table></div></figure>


<p>Now we can try our Virtual Development Board:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo qemu-system-arm -kernel src/u-boot/u-boot -net nic,vlan=0 -net \
</span><span class='line'>tap,vlan=0,ifname=tap0,script=/etc/qemu-ifup -nographic -M versatilepb</span></code></pre></td></tr></table></div></figure>


<p>After U-Boot booting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VersatilePB # setenv autload no
</span><span class='line'>VersatilePB # dhcp
</span><span class='line'>MC91111: PHY auto-negotiate timed out
</span><span class='line'>SMC91111: MAC 52:54:00:12:34:56
</span><span class='line'>BOOTP broadcast 1
</span><span class='line'>DHCP client bound to address 192.168.1.13
</span><span class='line'>VersatilePB # setenv serverip 192.168.1.24
</span><span class='line'>VersatilePB # setenv bootfile uImage
</span><span class='line'>VersatilePB # tftp</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>192.168.1.24</code> should be replaced with correct address of TFTP server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>VersatilePB # tftp
</span><span class='line'>SMC91111: PHY auto-negotiate timed out
</span><span class='line'>SMC91111: MAC 52:54:00:12:34:56
</span><span class='line'>Using SMC91111-0 device
</span><span class='line'>TFTP from server 192.168.1.20; our IP address is 192.168.1.13
</span><span class='line'>Filename 'uImage'.
</span><span class='line'>Load address: 0x7fc0
</span><span class='line'>Loading: #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         #################################################################
</span><span class='line'>         ##################################################
</span><span class='line'>         252 KiB/s
</span><span class='line'>done
</span><span class='line'>Bytes transferred = 1917944 (1d43f8 hex)</span></code></pre></td></tr></table></div></figure>


<p>Right now we will set boot arguments for our kernel:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setenv bootargs 'root=/dev/nfs mem=128M ip=dhcp netdev=25,0,0xf1010000,0xf1010010,eth0 nfsroot=192.168.1.20:/srv/homes/rootfs console=ttyAMA0'</span></code></pre></td></tr></table></div></figure>


<p>What does it mean:</p>

<ul>
<li><code>root=/dev/nfs</code> &ndash; following
<a href="https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt">kernel.org</a>:</li>
</ul>


<blockquote><p>This is necessary to enable the pseudo-NFS-device. Note that it&#8217;s not a real device but just a synonym to tell the kernel to use NFS instead of a real device.</p></blockquote>


<ul>
<li><code>mem=128M ip=dhcp</code> &ndash; self-explaining</li>
<li><code>netdev=25,0,0xf1010000,0xf1010010,eth0</code> &ndash; network device configuration
(<code>Format: &lt;irq&gt;,&lt;io&gt;,&lt;mem_start&gt;,&lt;mem_end&gt;,&lt;name&gt;</code>), this was provided by
default <code>U-Boot</code> bootargs</li>
<li><code>nfsroot=192.168.1.20:/srv/homes/rootfs</code> &ndash; NFS server ip and path to rootfs</li>
<li><code>console=ttyAMA0</code> &ndash; very importanat if you want to see anything in <code>-nographic</code> mode</li>
</ul>


<p>After setting bootargs we can boot our Virtual Development Board:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bootm</span></code></pre></td></tr></table></div></figure>


<p>As you can see that&rsquo;s not all, our current configuration end with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(...)
</span><span class='line'>Sending DHCP requests .input: AT Raw Set 2 keyboard as 
</span><span class='line'>/devices/fpga:06/serio0/input/input0
</span><span class='line'>, OK
</span><span class='line'>IP-Config: Got DHCP answer from 192.168.1.1, my address is 192.168.1.13
</span><span class='line'>IP-Config: Complete:
</span><span class='line'>     device=eth0, hwaddr=52:54:00:12:34:56, ipaddr=192.168.1.13, mask=255.255.255.0, gw=192.168.1.1
</span><span class='line'>     host=192.168.1.13, domain=, nis-domain=(none)
</span><span class='line'>     bootserver=0.0.0.0, rootserver=192.168.1.20, rootpath=
</span><span class='line'>     nameserver0=192.168.1.1
</span><span class='line'>input: ImExPS/2 Generic Explorer Mouse as 
</span><span class='line'>/devices/fpga:07/serio1/input/input1
</span><span class='line'>VFS: Mounted root (nfs filesystem) on device 0:9.
</span><span class='line'>Freeing unused kernel memory: 112K (c034e000 - c036a000)
</span><span class='line'>nfs: server 192.168.1.20 not responding, still trying
</span><span class='line'>nfs: server 192.168.1.20 OK
</span><span class='line'>can't run '/etc/init.d/rcS': No such file or directory
</span><span class='line'>can't open /dev/tty2: No such file or directory
</span><span class='line'>can't open /dev/tty3: No such file or directory
</span><span class='line'>
</span><span class='line'>can't open /dev/tty4: No such file or directory
</span><span class='line'>can't open /dev/tty2: No such file or directory
</span><span class='line'>can't open /dev/tty3: No such file or directory
</span><span class='line'>can't open /dev/tty4: No such file or directory
</span><span class='line'>can't open /dev/tty2: No such file or directory
</span><span class='line'>can't open /dev/tty3: No such file or directory</span></code></pre></td></tr></table></div></figure>


<p>try to open ttys loop. This is because of default behavior of <code>BusyBox</code> when <code>inittab</code>
was not found.</p>

<p><a id="embedded-filesystem-tuning"></a></p>

<h3>Embedded filesystem tuning</h3>

<p>To override above behavior we have to create <code>/etc/inittab</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /srv/homes/rootfs
</span><span class='line'>mkdir etc
</span><span class='line'>vim etc/inittab</span></code></pre></td></tr></table></div></figure>


<p>Our <code>inittab</code> is very simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>::sysinit:/etc/init.d/rcS
</span><span class='line'>::askfirst:/bin/ash
</span><span class='line'>::ctrlaltdel:/sbin/reboot
</span><span class='line'>::shutdown:/sbin/swapoff -a
</span><span class='line'>::shutdown:/bin/umount -a -r
</span><span class='line'>::restart:/sbin/init</span></code></pre></td></tr></table></div></figure>


<p>If you want to learn more about inittab &ndash; <code>man inittab</code> .We need improve out filesystem with few directories:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir sys proc etc/init.d</span></code></pre></td></tr></table></div></figure>


<p>In <code>/etc/init.d/rcS</code> we will mount sysfs and procfs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#! /bin/sh</span>
</span><span class='line'>mount -t proc proc /proc
</span><span class='line'>mount -t sysfs sysfs /sys
</span></code></pre></td></tr></table></div></figure>


<p>Give executable permission to <code>rcS</code> script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x etc/init.d/rcS
</span></code></pre></td></tr></table></div></figure>


<p>We also have to create <code>dev</code> directory with <code>ttyAMA0</code> block device:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir dev
</span><span class='line'>sudo mknod dev/ttyAMA0 c 204 64
</span><span class='line'>sudo mknod dev/null c 1 3
</span><span class='line'>sudo mknod dev/console c 5 1
</span></code></pre></td></tr></table></div></figure>


<p>Right now we should be able to boot our Virtual Development Board. Let&rsquo;s try
again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pietrushnic@eglarest:~<span class="nv">$ </span>sudo qemu-system-arm -m 256M -kernel src/u-boot/u-boot -net nic,vlan<span class="o">=</span>0 -net tap,vlan<span class="o">=</span>0,ifname<span class="o">=</span>tap0,script<span class="o">=</span>/etc/qemu-ifup -nographic -M versatilepb -net dump,file<span class="o">=</span>/tmp/dump.pcap
</span><span class='line'>Executing /etc/qemu-ifup
</span><span class='line'>Bringing up tap0 <span class="k">for </span>bridged mode...
</span><span class='line'>Adding tap0 to br0...
</span><span class='line'>oss: Could not initialize DAC
</span><span class='line'>oss: Failed to open <span class="sb">`</span>/dev/dsp<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">oss: Reason: No such file or directory</span>
</span><span class='line'><span class="s1">oss: Could not initialize DAC</span>
</span><span class='line'><span class="s1">oss: Failed to open `/dev/dsp&#39;</span>
</span><span class='line'>oss: Reason: No such file or directory
</span><span class='line'>audio: Failed to create voice <span class="sb">`</span>lm4549.out<span class="s1">&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s1">U-Boot 2013.04-00274-ga71d45d (May 27 2013 - 17:36:14)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">DRAM:  128 MiB</span>
</span><span class='line'><span class="s1">WARNING: Caches not enabled</span>
</span><span class='line'><span class="s1">Flash: 64 MiB</span>
</span><span class='line'><span class="s1">*** Warning - bad CRC, using default environment</span>
</span><span class='line'>
</span><span class='line'><span class="s1">In:    serial</span>
</span><span class='line'><span class="s1">Out:   serial</span>
</span><span class='line'><span class="s1">Err:   serial</span>
</span><span class='line'><span class="s1">Net:   SMC91111-0</span>
</span><span class='line'><span class="s1">Warning: SMC91111-0 using MAC address from net device</span>
</span><span class='line'>
</span><span class='line'><span class="s1">VersatilePB # setenv serverip 192.168.1.24</span>
</span><span class='line'><span class="s1">VersatilePB # setenv bootfile uImage</span>
</span><span class='line'><span class="s1">VersatilePB # setenv bootargs &#39;</span><span class="nv">root</span><span class="o">=</span>/dev/nfs <span class="nv">mem</span><span class="o">=</span>128M <span class="nv">ip</span><span class="o">=</span>dhcp <span class="nv">netdev</span><span class="o">=</span>25,0,0xf1010000,0xf1010010,eth0 <span class="nv">nfsroot</span><span class="o">=</span>192.168.1.24:/sv/homes/rootfs <span class="nv">console</span><span class="o">=</span>ttyAMA0<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">VersatilePB # dhcp</span>
</span><span class='line'><span class="s1">SMC91111: PHY auto-negotiate timed out</span>
</span><span class='line'><span class="s1">SMC91111: MAC 52:54:00:12:34:56</span>
</span><span class='line'><span class="s1">BOOTP broadcast 1</span>
</span><span class='line'><span class="s1">DHCP client bound to address 192.168.1.13</span>
</span><span class='line'><span class="s1">Using SMC91111-0 device</span>
</span><span class='line'><span class="s1">TFTP from server 192.168.1.24; our IP address is 192.168.1.13</span>
</span><span class='line'><span class="s1">Filename &#39;</span>uImage<span class="s1">&#39;.</span>
</span><span class='line'><span class="s1">Load address: 0x7fc0</span>
</span><span class='line'><span class="s1">Loading: *############T #####################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  #################################################################</span>
</span><span class='line'><span class="s1">  ##################################################</span>
</span><span class='line'><span class="s1">  0 Bytes/s</span>
</span><span class='line'><span class="s1">done</span>
</span><span class='line'><span class="s1">Bytes transferred = 1917944 (1d43f8 hex)</span>
</span><span class='line'><span class="s1">VersatilePB # bootm</span>
</span><span class='line'><span class="s1">## Booting kernel from Legacy Image at 00007fc0 ...</span>
</span><span class='line'><span class="s1">   Image Name:   Linux-3.10.0-rc3</span>
</span><span class='line'><span class="s1">   Image Type:   ARM Linux Kernel Image (uncompressed)</span>
</span><span class='line'><span class="s1">   Data Size:    1917880 Bytes = 1.8 MiB</span>
</span><span class='line'><span class="s1">   Load Address: 00008000</span>
</span><span class='line'><span class="s1">   Entry Point:  00008000</span>
</span><span class='line'><span class="s1">   XIP Kernel Image ... OK</span>
</span><span class='line'><span class="s1">OK</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Starting kernel ...</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Uncompressing Linux... done, booting the kernel.</span>
</span><span class='line'><span class="s1">Booting Linux on physical CPU 0x0</span>
</span><span class='line'><span class="s1">Linux version 3.10.0-rc3 (pietrushnic@eglarest) (gcc version 4.7.2 (Debian 4.7.2-4) ) #2 Sun Jun 2 20:25:23 CEST 2013</span>
</span><span class='line'><span class="s1">CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=00093177</span>
</span><span class='line'><span class="s1">CPU: VIVT data cache, VIVT instruction cache</span>
</span><span class='line'><span class="s1">Machine: ARM-Versatile PB</span>
</span><span class='line'><span class="s1">Memory policy: ECC disabled, Data cache writeback</span>
</span><span class='line'><span class="s1">sched_clock: 32 bits at 24MHz, resolution 41ns, wraps every 178956ms</span>
</span><span class='line'><span class="s1">Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 32512</span>
</span><span class='line'><span class="s1">Kernel command line: root=/dev/nfs mem=128M ip=dhcp netdev=25,0,0xf1010000,0xf1010010,eth0 nfsroot=192.168.1.24:/srv/homes/rootfs console=ttyAMA0</span>
</span><span class='line'><span class="s1">PID hash table entries: 512 (order: -1, 2048 bytes)</span>
</span><span class='line'><span class="s1">Dentry cache hash table entries: 16384 (order: 4, 65536 bytes)</span>
</span><span class='line'><span class="s1">Inode-cache hash table entries: 8192 (order: 3, 32768 bytes)</span>
</span><span class='line'><span class="s1">Memory: 128MB = 128MB total</span>
</span><span class='line'><span class="s1">Memory: 126136k/126136k available, 4936k reserved, 0K highmem</span>
</span><span class='line'><span class="s1">Virtual kernel memory layout:</span>
</span><span class='line'><span class="s1">    vector  : 0xffff0000 - 0xffff1000   (   4 kB)</span>
</span><span class='line'><span class="s1">    fixmap  : 0xfff00000 - 0xfffe0000   ( 896 kB)</span>
</span><span class='line'><span class="s1">    vmalloc : 0xc8800000 - 0xff000000   ( 872 MB)</span>
</span><span class='line'><span class="s1">    lowmem  : 0xc0000000 - 0xc8000000   ( 128 MB)</span>
</span><span class='line'><span class="s1">    modules : 0xbf000000 - 0xc0000000   (  16 MB)</span>
</span><span class='line'><span class="s1">      .text : 0xc0008000 - 0xc034dd58   (3352 kB)</span>
</span><span class='line'><span class="s1">      .init : 0xc034e000 - 0xc036ae8c   ( 116 kB)</span>
</span><span class='line'><span class="s1">      .data : 0xc036c000 - 0xc0391de0   ( 152 kB)</span>
</span><span class='line'><span class="s1">       .bss : 0xc0391de0 - 0xc03ad6cc   ( 111 kB)</span>
</span><span class='line'><span class="s1">NR_IRQS:224</span>
</span><span class='line'><span class="s1">VIC @f1140000: id 0x00041190, vendor 0x41</span>
</span><span class='line'><span class="s1">FPGA IRQ chip 0 &quot;SIC&quot; @ f1003000, 13 irqs</span>
</span><span class='line'><span class="s1">Console: colour dummy device 80x30</span>
</span><span class='line'><span class="s1">Calibrating delay loop... 649.21 BogoMIPS (lpj=3246080)</span>
</span><span class='line'><span class="s1">pid_max: default: 32768 minimum: 301</span>
</span><span class='line'><span class="s1">Mount-cache hash table entries: 512</span>
</span><span class='line'><span class="s1">CPU: Testing write buffer coherency: ok</span>
</span><span class='line'><span class="s1">Setting up static identity map for 0xc0286e90 - 0xc0286ee8</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 16</span>
</span><span class='line'><span class="s1">DMA: preallocated 256 KiB pool for atomic coherent allocations</span>
</span><span class='line'><span class="s1">Serial: AMBA PL011 UART driver</span>
</span><span class='line'><span class="s1">dev:f1: ttyAMA0 at MMIO 0x101f1000 (irq = 44) is a PL011 rev1</span>
</span><span class='line'><span class="s1">console [ttyAMA0] enabled</span>
</span><span class='line'><span class="s1">dev:f2: ttyAMA1 at MMIO 0x101f2000 (irq = 45) is a PL011 rev1</span>
</span><span class='line'><span class="s1">dev:f3: ttyAMA2 at MMIO 0x101f3000 (irq = 46) is a PL011 rev1</span>
</span><span class='line'><span class="s1">fpga:09: ttyAMA3 at MMIO 0x10009000 (irq = 70) is a PL011 rev1</span>
</span><span class='line'><span class="s1">bio: create slab &lt;bio-0&gt; at 0</span>
</span><span class='line'><span class="s1">Switching to clocksource timer3</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 2</span>
</span><span class='line'><span class="s1">TCP established hash table entries: 1024 (order: 1, 8192 bytes)</span>
</span><span class='line'><span class="s1">TCP bind hash table entries: 1024 (order: 0, 4096 bytes)</span>
</span><span class='line'><span class="s1">TCP: Hash tables configured (established 1024 bind 1024)</span>
</span><span class='line'><span class="s1">TCP: reno registered</span>
</span><span class='line'><span class="s1">UDP hash table entries: 256 (order: 0, 4096 bytes)</span>
</span><span class='line'><span class="s1">UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 1</span>
</span><span class='line'><span class="s1">RPC: Registered named UNIX socket transport module.</span>
</span><span class='line'><span class="s1">RPC: Registered udp transport module.</span>
</span><span class='line'><span class="s1">RPC: Registered tcp transport module.</span>
</span><span class='line'><span class="s1">RPC: Registered tcp NFSv4.1 backchannel transport module.</span>
</span><span class='line'><span class="s1">NetWinder Floating Point Emulator V0.97 (double precision)</span>
</span><span class='line'><span class="s1">Installing knfsd (copyright (C) 1996 okir@monad.swb.de).</span>
</span><span class='line'><span class="s1">jffs2: version 2.2. (NAND) © 2001-2006 Red Hat, Inc.</span>
</span><span class='line'><span class="s1">ROMFS MTD (C) 2007 Red Hat, Inc.</span>
</span><span class='line'><span class="s1">msgmni has been set to 246</span>
</span><span class='line'><span class="s1">Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)</span>
</span><span class='line'><span class="s1">io scheduler noop registered</span>
</span><span class='line'><span class="s1">io scheduler deadline registered</span>
</span><span class='line'><span class="s1">io scheduler cfq registered (default)</span>
</span><span class='line'><span class="s1">clcd-pl11x dev:20: PL110 rev0 at 0x10120000</span>
</span><span class='line'><span class="s1">clcd-pl11x dev:20: Versatile hardware, VGA display</span>
</span><span class='line'><span class="s1">Console: switching to colour frame buffer device 80x60</span>
</span><span class='line'><span class="s1">brd: module loaded</span>
</span><span class='line'><span class="s1">physmap platform flash device: 04000000 at 34000000</span>
</span><span class='line'><span class="s1">physmap-flash.0: Found 1 x32 devices at 0x0 in 32-bit bank. Manufacturer ID 0x000000 Chip ID 0x000000</span>
</span><span class='line'><span class="s1">Intel/Sharp Extended Query Table at 0x0031</span>
</span><span class='line'><span class="s1">Using buffer write method</span>
</span><span class='line'><span class="s1">smc91x.c: v1.1, sep 22 2004 by Nicolas Pitre &lt;nico@fluxnic.net&gt;</span>
</span><span class='line'><span class="s1">eth0: SMC91C11xFD (rev 1) at c89c8000 IRQ 57 [nowait]</span>
</span><span class='line'><span class="s1">eth0: Ethernet addr: 52:54:00:12:34:56</span>
</span><span class='line'><span class="s1">mousedev: PS/2 mouse device common for all mice</span>
</span><span class='line'><span class="s1">TCP: cubic registered</span>
</span><span class='line'><span class="s1">NET: Registered protocol family 17</span>
</span><span class='line'><span class="s1">VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0</span>
</span><span class='line'><span class="s1">eth0: link up</span>
</span><span class='line'><span class="s1">Sending DHCP requests ., OK</span>
</span><span class='line'><span class="s1">IP-Config: Got DHCP answer from 192.168.1.1, my address is 192.168.1.13</span>
</span><span class='line'><span class="s1">IP-Config: Complete:</span>
</span><span class='line'><span class="s1">     device=eth0, hwaddr=52:54:00:12:34:56, ipaddr=192.168.1.13, mask=255.255.255.0, gw=192.168.1.1</span>
</span><span class='line'><span class="s1">     host=192.168.1.13, domain=, nis-domain=(none)</span>
</span><span class='line'><span class="s1">     bootserver=0.0.0.0, rootserver=192.168.1.24, rootpath=</span>
</span><span class='line'><span class="s1">     nameserver0=192.168.1.1</span>
</span><span class='line'><span class="s1">input: AT Raw Set 2 keyboard as /devices/fpga:06/serio0/input/input0</span>
</span><span class='line'><span class="s1">input: ImExPS/2 Generic Explorer Mouse as /devices/fpga:07/serio1/input/input1</span>
</span><span class='line'><span class="s1">VFS: Mounted root (nfs filesystem) on device 0:9.</span>
</span><span class='line'><span class="s1">Freeing unused kernel memory: 112K (c034e000 - c036a000)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Please press Enter to activate this console. </span>
</span><span class='line'><span class="s1">/bin/ash: can&#39;</span>t access tty; job control turned off
</span><span class='line'>/ <span class="c"># </span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="summary"></a></p>

<h3>Summary</h3>

<p>This setup need few minor tweaks like adding U-Boot environment variables
storage to not enter it every time or removing annoying message <code>can't access
tty(...)</code>. I&rsquo;m done for now, its time to take care about other challenges. I
hope that I will back to this issues in near future. If you like this series
please share it, if somethings wrong please comment I will try to help if can.</p>

<p><a href="http://bec-systems.com/site/418/how-to-set-up-a-nfs-rootfs">How to set up a NFS root filesystem for embedded Linux development</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x5: Qemu network configuration and tftp for Virtual Development Board]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/"/>
    <updated>2013-06-07T10:36:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#setup-tftpd">Setup tftpd</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#qemu-networking">QEMU networking</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#verify-qemu-with-tftp">Verify all components of Virtual Development Platform</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#what-next">What next ?</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>This was not trivial task to me. As usual <code>google is your friend</code> and <code>RTFM</code> works.
First we will set tftp which we use to download modified kernel for U-Boot.
Second I will show how to setup bridged network for QEMU needs and finally we
will perform some basic test of our setup. Let&rsquo;s go.</p>

<p><a id="setup-tftpd"></a></p>

<h3>Setup tftpd</h3>

<p>First install:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install tftpd tftp
</span></code></pre></td></tr></table></div></figure>


<p>Make sure that <code>/srv/tftp</code> is writable for your user. If directory doesn&rsquo;t exist
create it and give needed privileges. If you want to change some server options
edit <code>/etc/inetd.conf</code>. Copy or link our kernel to tftp server
directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /path/to/kernel/arch/arm/boot
</span><span class='line'>ln -s <span class="nv">$PWD</span>/uImage /srv/tftp/uImage
</span></code></pre></td></tr></table></div></figure>


<p>Verify if everything works correctly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span>             <span class="c"># go to home or any other directory different than arch/arm/boot</span>
</span><span class='line'>tftp 127.0.0.1 <span class="c"># connect to localhost tftp server</span>
</span><span class='line'>get uImage     <span class="c"># get kernel file</span>
</span><span class='line'>q              <span class="c"># quit tftp</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check if kernel file is in current directory. If yes than you tftp server is
configured correctly, if not then google or ask me a question in comments
section.
<em>Note</em>: For Ubuntu follow instructions from
<a href="http://www.davidsudjiman.info/2006/03/27/installing-and-setting-tftpd-in-ubuntu/">here</a>.</p>

<p><a id="qemu-networking"></a></p>

<h3>QEMU networking</h3>

<p><em>Update</em>: For Ubuntu users please read <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#ubuntu-issues">this section</a></p>

<p>I mixed <a href="http://toast.djw.org.uk/qemu.html">this</a> BKM and few other resources
that I found in the net. Setting up network depend a lot on your configuration.
I will briefly describe my situation. It is quite possible that this won&rsquo;t fit
yours.</p>

<p>I&rsquo;ve <code>eth0</code> with ip <code>10.0.2.15</code>. What I want to do is create another interface <code>tap0</code> and
bridge <code>br0</code> that will connect <code>eth0</code> and <code>tap0</code>. To do this I need few things:</p>

<ul>
<li><code>brctl</code> is provided in Debian by <code>bridge-utils</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install bridge-utils
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>check if TUN module was installed</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>grep <span class="nv">CONFIG_TUN</span><span class="o">=</span> /boot/config-<span class="sb">`</span>uname -r<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>you should get <code>y</code> or <code>m</code>, if it is <code>m</code> than <code>modprobe tun</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo modprobe tun
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>create tun device</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mknod /dev/net/tun c 10 200
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>update <code>/etc/network/interfaces</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># This file describes the network interfaces available on your system</span>
</span><span class='line'><span class="c"># and how to activate them. For more information, see interfaces(5).</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The loopback network interface</span>
</span><span class='line'>auto lo
</span><span class='line'>iface lo inet loopback
</span><span class='line'>
</span><span class='line'><span class="c"># add br0 configuration</span>
</span><span class='line'>auto br0
</span><span class='line'>iface br0 inet dhcp
</span><span class='line'>bridge_ports eth0 <span class="c"># do not forget to attach eth0 to br0</span>
</span><span class='line'>bridge_fd 9
</span><span class='line'>bridge_hello 2
</span><span class='line'>bridge_maxage 12
</span><span class='line'>bridge_stp off
</span><span class='line'>
</span><span class='line'><span class="c"># The primary network interface</span>
</span><span class='line'>allow-hotplug eth0     <span class="c"># comment this</span>
</span><span class='line'>iface eth0 inet dhcp   <span class="c"># and this</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>use <code>/etc/qemu-ifup</code> script to bring up your network:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Executing /etc/qemu-ifup&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Bringing up $1 for bridged mode...&quot;</span>
</span><span class='line'>sudo /sbin/ifconfig <span class="nv">$1</span> 0.0.0.0 promisc up
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Adding $1 to br0...&quot;</span>
</span><span class='line'>sudo /sbin/brctl addif br0 <span class="nv">$1</span>
</span><span class='line'>sleep 2
</span></code></pre></td></tr></table></div></figure>


<p>Give executable permissions for this file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod +x /etc/qemu-ifup
</span></code></pre></td></tr></table></div></figure>


<p>Restart networking services locally:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service networking restart
</span></code></pre></td></tr></table></div></figure>


<p>This should prepare you environment for tftp booting in qemu.</p>

<p><a id="ubuntu-issues"></a></p>

<h4>Ubuntu issues</h4>

<p>I had experienced few problems with my Ubuntu 12.04.</p>

<ul>
<li><p>First thing was defect that cause looping u-boot during emulation in
qemu-system-arm. I checked latest qemu and version delivered in distro
repository but qemu wasn&rsquo;t issue. I tried debug problem with gdb and qemu
<code>-s -S</code> switches and find out that u-boot crashes at <code>__udivsi3</code> instruction
in <code>serial_init</code>. I tried to google this issue but found only one comment
about this on <a href="http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/">Balau blog</a>:
<blockquote><p>For anyone trying to reproduce this, at least on a recent Ubuntu host, you may need to pass “-cpu all” or “-cpu cortex-a8″ to qemu. The libgcc that gets linked to u-boot appears to be compiled with thumb2 instructions which are not implemented in the Versatile cpu. I don’t get any u-boot console output without this flag, and using gdb I can see that the cpu takes an exception during <code>__udivsi3()</code> called from serial_init().</p><footer><strong>[Grant Likely]</strong></footer></blockquote>
Problem is at least 2-years old and still occurs. Unfortunately Grant&rsquo;s tricks
didn&rsquo;t help. I move to toolchain built by my own and problem was fixed. So the
moral of the story is: DO NOT USE TOOLCHAIN PROVIDED BY UBUNTU at least in
12.04.</p></li>
<li><p>Second thing also involve a lot of debugging time and when I found workaround
it was accidentally. I saw that using procedure correct for Debian on Ubuntu I
was unable to obtain any packet inside U-Boot. Network traffic analysis show
that U-Boot correctly send DHCP discovery and server reply with DHCP offer,
but bootloader behaves like no packet was received.  Static configuration also
didn&rsquo;t work. Finally I get to information how to capture traffic from inside
of emulated setup (parameter <code>-net dump,file=/path/to/file.pcap</code> do the
thing). Surprisingly for some reason adding dump param fix problem and U-Boot
received DHCP Offer and ACK. I will try to narrow down this problem for
further reading please take a look <a href="http://lists.nongnu.org/archive/html/qemu-discuss/2013-05/msg00013.html">qemu</a>
and <a href="">u-boot</a> mailing list thread.</p></li>
</ul>


<p><a id="verify-qemu-with-tftp"></a></p>

<h4>Verify all components of Virtual Development Platform</h4>

<p>So right now we should have built <a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system">kernel uImage</a>, <a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader">U-Boot image</a>,
<a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#qemu-networking">configured qemu network</a> and <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/#setup-tftpd">tftp server</a>. With all this components we can
verify if our kernel booting on emulated <code>versatilepb</code>.</p>

<p>Run your qemu with network using U-Boot image as a kernel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo qemu-system-arm -kernel /path/to/u-boot/u-boot -net nic,vlan<span class="o">=</span>0 -net tap,vlan<span class="o">=</span>0,ifname<span class="o">=</span>tap0,script<span class="o">=</span>/etc/qemu-ifup -nographic -M versatilepb
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE</em>: We want to use u-boot file instead of u-boot.bin. First is ELF binary
image and second is raw binary. Raw binary image can be used with <code>-bios</code>
parameter for qemu. If you try to give raw binary as a kernel parameter it will result with error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>qemu: fatal: Trying to execute code outside RAM or ROM at 0x08000000
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE 2</em>: We have to specify <code>versatilepb</code> machine. If we forget it we will get
error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>qemu: hardware error: integratorcm_read: Unimplemented offset 0x1e0000
</span></code></pre></td></tr></table></div></figure>


<p>Right now we have u-boot booted. Let&rsquo;s set ip addresses to boot uImage from our
tftp server. For verification needs we don&rsquo;t want to <code>autoload</code> downloaded
image, so we disable this through environment variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setenv autoload no
</span><span class='line'>dhcp
</span><span class='line'>setenv serverip 192.168.1.2
</span><span class='line'>setenv bootfile uImage
</span><span class='line'>tftpboot
</span></code></pre></td></tr></table></div></figure>


<p>Set addresses according to your configuration. For some reason I was unable to
use u-boot <code>dhcp</code> feature. It assign me address that exist in the network.</p>

<p>We can take a close look on out downloaded image with <code>iminfo</code> command.
<code>tftpboot</code> and <code>iminfo</code> should looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>VersatilePB <span class="c"># tftpboot</span>
</span><span class='line'>SMC91111: PHY auto-negotiate timed out
</span><span class='line'>SMC91111: MAC 52:54:00:12:34:56
</span><span class='line'>Using SMC91111-0 device
</span><span class='line'>TFTP from server 10.0.2.15; our IP address is 10.0.2.16
</span><span class='line'>Filename <span class="s1">&#39;uImage&#39;</span>.
</span><span class='line'>Load address: 0x7fc0
</span><span class='line'>Loading: <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">#################################################################</span>
</span><span class='line'>         <span class="c">##############################################</span>
</span><span class='line'>         0 Bytes/s
</span><span class='line'><span class="k">done</span>
</span><span class='line'>Bytes <span class="nv">transferred</span> <span class="o">=</span>
</span><span class='line'>1895064 <span class="o">(</span>1cea98 hex<span class="o">)</span>
</span><span class='line'>VersatilePB <span class="c"># iminfo</span>
</span><span class='line'>
</span><span class='line'><span class="c">## Checking Image at </span>
</span><span class='line'>00007fc0 ...
</span><span class='line'>    Legacy image found
</span><span class='line'>    Image Name:   Linux-3.9.0-rc8
</span><span class='line'>    Image Type:   ARM Linux Kernel Image <span class="o">(</span>uncompressed<span class="o">)</span>
</span><span class='line'>    Data Size:    1895000 <span class="nv">Bytes</span> <span class="o">=</span> 1.8 MiB
</span><span class='line'>    Load Address: 00008000
</span><span class='line'>    Entry Point:  00008000
</span><span class='line'>    Verifying Checksum ... OK
</span></code></pre></td></tr></table></div></figure>


<p>So, that what we want to see. Pretty new kernel <code>3.9.0-rc8</code> compiled as ARM
image. We can try to boot it but we will end with kernel panic because lack of
filesystem.</p>

<p><em>NOTE 3</em>: If you want to see anything after booting this image with <code>bootm</code> you
have to pass to kernel additional boot argument with serial device that should
be used as a console. Before <code>bootm</code> set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setenv bootargs <span class="nv">console</span><span class="o">=</span>ttyAMA0
</span></code></pre></td></tr></table></div></figure>


<p>You should get something similar to below log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">(</span>...<span class="o">)</span>
</span><span class='line'>eth0: SMC91C11xFD <span class="o">(</span>rev 1<span class="o">)</span> at c89c8000 IRQ 57 <span class="o">[</span>nowait<span class="o">]</span>
</span><span class='line'>eth0: Ethernet addr: 52:54:00:12:34:56
</span><span class='line'>mousedev: PS/2 mouse device common <span class="k">for </span>all mice
</span><span class='line'>TCP: cubic registered
</span><span class='line'>NET: Registered protocol family 17
</span><span class='line'>VFP support v0.3: implementor 41 architecture 1 part 10 variant 9 rev 0
</span><span class='line'>VFS: Cannot open root device <span class="s2">&quot;(null)&quot;</span> or unknown-block<span class="o">(</span>0,0<span class="o">)</span>: error -6
</span><span class='line'>Please append a correct <span class="s2">&quot;root=&quot;</span> boot option; here are the available partitions:
</span><span class='line'>1f00           65536 mtdblock0  <span class="o">(</span>driver?<span class="o">)</span>
</span><span class='line'>Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block<span class="o">(</span>0,0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0018afc&gt;<span class="o">]</span> <span class="o">(</span>unwind_backtrace+0x0/0xf0<span class="o">)</span> from <span class="o">[</span>&lt;c027af8c&gt;<span class="o">]</span> <span class="o">(</span>panic+0x80/0x1d0<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c027af8c&gt;<span class="o">]</span> <span class="o">(</span>panic+0x80/0x1d0<span class="o">)</span> from <span class="o">[</span>&lt;c0343c64&gt;<span class="o">]</span> <span class="o">(</span>mount_block_root+0x1a0/0x258<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0343c64&gt;<span class="o">]</span> <span class="o">(</span>mount_block_root+0x1a0/0x258<span class="o">)</span> from <span class="o">[</span>&lt;c0343f08&gt;<span class="o">]</span> <span class="o">(</span>mount_root+0xf0/0x118<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0343f08&gt;<span class="o">]</span> <span class="o">(</span>mount_root+0xf0/0x118<span class="o">)</span> from <span class="o">[</span>&lt;c0344090&gt;<span class="o">]</span> <span class="o">(</span>prepare_namespace+0x160/0x1b4<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c0344090&gt;<span class="o">]</span> <span class="o">(</span>prepare_namespace+0x160/0x1b4<span class="o">)</span> from <span class="o">[</span>&lt;c03438ec&gt;<span class="o">]</span> <span class="o">(</span>kernel_init_freeable+0x168/0x1ac<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c03438ec&gt;<span class="o">]</span> <span class="o">(</span>kernel_init_freeable+0x168/0x1ac<span class="o">)</span> from <span class="o">[</span>&lt;c027a074&gt;<span class="o">]</span> <span class="o">(</span>kernel_init+0x8/0xe4<span class="o">)</span>
</span><span class='line'><span class="o">[</span>&lt;c027a074&gt;<span class="o">]</span> <span class="o">(</span>kernel_init+0x8/0xe4<span class="o">)</span> from <span class="o">[</span>&lt;c0013df0&gt;<span class="o">]</span> <span class="o">(</span>ret_from_fork+0x14/0x24<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is expected result.</p>

<p><a id="what-next"></a></p>

<h3>What next ?</h3>

<p>We happily built basic virtual development, what we need right now is some
<a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system">initial filesystem</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x4: Linux kernel for embedded system]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/"/>
    <updated>2013-06-07T10:33:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/#a-little-history">A little history</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/#get-linux-and-build-it">Get linux and build it</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/#kudos">Kudos</a></li>
</ul>


<p><a id="a-little-history"></a></p>

<h3>A little history</h3>

<p>Thinking about embedded linux probably leads to  first try of porting linux to
different architecture. I did google research (I know I should probably read
mailing list archive) and found that there were few attempt to port linux to
different platform. There is no clear information about which port of linux was
first. This is probably because many hackers didn&rsquo;t report their effort. Arguably
earliest out-of-tree version was probably for Acron A5000 (arm), Motorola 68000
(m68k) around Spring/Summer of 1994. I found also notes about SPARC port in
1993. Some sources also tells story about 1993 Amiga and Atari port. But first
port that get in to official linux tree was DEC Alpha.<a href="http://digital-domain.net/lug/unix-linux-history.html">[1]</a><a href="http://www.arm.linux.org.uk/docs/history.php">[2]</a></p>

<p>So linux is already 22 years old and first port start when it was 2-3 years old,
so we can assume it is mature enough to support most of non-x86 architectures.</p>

<p><a id="get-linux-and-build-it"></a></p>

<h3>Get linux and build it</h3>

<p>To deal with our <em>embedded</em> board we need operating system or some kind of
software that will allow us to use board features. Right now to boot system we
need at least kernel. So we have to prepare kernel for board of choice
<code>versatilepb</code>.</p>

<p>Let&rsquo;s start with cloning Linux repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</span></code></pre></td></tr></table></div></figure>


<p>and configure kernel for <code>versatilepb</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd linux
</span><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- versatile_defconfig</span></code></pre></td></tr></table></div></figure>


<p>It looks some feature is disabled in <code>versatile_defconfig</code>. I mean
<code>CONFIG_AEABI</code>. It specifies file format, data types, register usage and other
things. The main difference between EABI and ABI is that privileged instructions
are allowed in application code. More about EABI
<a href="http://en.wikipedia.org/wiki/Application_binary_interface#EABI">here</a>.
To enable this option run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig</span></code></pre></td></tr></table></div></figure>


<p>and go to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Kernel Features -&gt; Use the ARM EABI to compile the kernel</span></code></pre></td></tr></table></div></figure>


<p>We will also need DHCP and NFS support (CONFIG_IP_PNP_DHCP and CONFIG_ROOT_NFS).
First is <code>IP: DHCP support</code> and can be found under:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt; Networking support (NET [=y])
</span><span class='line'>  -&gt; Networking options
</span><span class='line'>    -&gt; TCP/IP networking (INET [=y])
</span><span class='line'>      -&gt; IP: kernel level autoconfiguration (IP_PNP [=y])</span></code></pre></td></tr></table></div></figure>


<p>Second is :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt; File systems
</span><span class='line'>  -&gt; Network File Systems (NETWORK_FILESYSTEMS [=y])  </span></code></pre></td></tr></table></div></figure>


<p>let&rsquo;s build image with U-Boot support.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- uImage</span></code></pre></td></tr></table></div></figure>


<p>We have kernel. How we can provide this kernel to our development environment ?
As I discuss in <a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader">previous post</a> we
can use bare-metal qemu, but not with uImage kernel. This is special U-Boot
kernel, so easiest way will be using it with bootloader. We will figure out how
to do this in <a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board">next section</a>
about tftp and qemu network configuration.</p>

<p><strong>TODO</strong>: add picture of configuration in intro &ndash; vdb, link it here
Target configuration will consist on providing kernel through tftp server using U-Boot. Also
want to use NFS root filesystem to boot our small distro. As it is in real
development environment.</p>

<p><em>NOTE</em>: During compilation process you can encounter error like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(...)
</span><span class='line'>  UIMAGE  arch/arm/boot/uImage
</span><span class='line'>  "mkimage" command not found - U-Boot images will not be built
</span><span class='line'>  make[1]: *** [arch/arm/boot/uImage] Error 1
</span><span class='line'>  make: *** [uImage] Error 2</span></code></pre></td></tr></table></div></figure>


<p>Of course it means that we need mkimage to create U-Boot image, so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install uboot-mkimage</span></code></pre></td></tr></table></div></figure>


<p><em>Update</em>: in Debian jessie/sid this package was replaced by <code>u-boot-tools</code>.</p>

<p>We have to use uImage special build because load and execute address differes
from board to board. If we will use vmlinux image then addresses should be
manually modified. So using uImage is easiest</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://digital-domain.net/lug/unix-linux-history.html">UNIX/Linux History</a></br>
[2] <a href="http://www.arm.linux.org.uk/docs/history.php">The History of ARM Linux</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x3: Embedded board bootloader]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/"/>
    <updated>2013-06-07T10:32:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#what-is-bootloader">What is bootloader ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#why-we-need-bootloader">Why we need bootloader ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#which-bootloader">Which bootloader ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#what-is-versatilepb">What is versatilepb ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#compilation">Compilation</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#where-to-go-from-here">Where to go from here ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/#kudos">Kudos</a></li>
</ul>


<p><a id="what-is-bootloader"></a></p>

<h3>What is bootloader ?</h3>

<p>It is a program written to bring up more complex code (eg. kernel).</p>

<p>On very simple system it can even not exist. Bootloader should prepare all
required hardware that kernel or different operating software will need at its
start point. It is hard to create cross platform bootloader because of variety
of system requirements.</p>

<p><a id="why-we-need-bootloader"></a></p>

<h3>Why we need bootloader ?</h3>

<p>The true is that we don&rsquo;t :) because we can simply pass kernel and initramfs as
parameters to QEMU, but it is not common practice for real development environment.<br/>
Usually bootloader is stripped in production environment where boot time is
crucial. Second thing, bootloader is useful to learn how real development
environment for embedded system works. From other side using bootloader we can
create single binary file that contain bootable embedded system, so we can run
it without giving multiple arguments at QEMU startup. I will try to keep in mind
idea about being as close to real development environment as possible.</p>

<p><a id="which-bootloader"></a></p>

<h3>Which bootloader ?</h3>

<p>There are many approaches to this problem. The most popular today is
<a href="http://www.denx.de/wiki/U-Boot">U-Boot</a> but there are alternatives like <a href="http://www.barebox.org/">The Barebox Bootloader</a>.
I will try to get to know them better in future. Right now I will use U-Boot as
Virtual Development Board bootloader to make the edit-compile-download-test cycle
similar to real world situation. So get the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone http://git.denx.de/u-boot.git
</span></code></pre></td></tr></table></div></figure>


<p>U-Boot configuration depends on pair cpu-board. So right now we know that our
cpu will be some ARM but what exactly ? It depends on configuration we will use.
In most scenarios presented in Internet the <code>versatilepb</code> was used. We can also
think about running different boards.</p>

<p>What pros U-Boot gives us in the light of previous question <code>Why we need
bootloader ?</code>:
* simplified process of porting kernel, because low level stuff is handled by
U-Boot
* simplified testing environment in easy way you can grab different version of
  kernel with different version of initrd and test it</p>

<p><a id="what-is-versatilepb"></a></p>

<h3>What is versatilepb ?</h3>

<p>According to <a href="http://www.arm.com/products/tools/development-boards/versatile/index.php">this page</a>
versatile is highly modular, feature-rich range of development board. <code>pb</code>
means <code>Platform Baseboard</code> integrated, standalone development system with fixed
CPU. But this is only corporate babble :)</p>

<p>QEMU shows <code>versatilepb</code> as Versatile/PB
(<a href="http://www.arm.com/products/processors/classic/arm9/arm926.php">ARM926EJ-S</a>).</p>

<p><a id="compilation"></a></p>

<h3>Compilation</h3>

<p>For <code>Emdebian</code> cross-toolchain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>u-boot
</span><span class='line'>make <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi- versatilepb_config
</span><span class='line'>make <span class="nv">ARCH</span><span class="o">=</span>arm <span class="nv">CROSS_COMPILE</span><span class="o">=</span>arm-linux-gnueabi-
</span></code></pre></td></tr></table></div></figure>


<p><em>Note</em>: If you wonder what is the convention for cross-toolchain prefix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>arch<span class="o">]</span>-<span class="o">[</span>vendor<span class="o">]</span>-<span class="o">[</span>os<span class="o">]</span>-<span class="o">[</span>abi<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Emdebian</code> striped vendor probably to keep name short, but for example
<code>Corsstool-NG</code> follow convetion and calls toolchain like
<code>arm-unknown-linux-gnueabi-</code>.</p>

<p><a id="where-to-go-from-here"></a></p>

<h3>Where to go from here ?</h3>

<p><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system">Next step</a> will be kernel compilation for our virtual <code>versatilepb</code> board.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://www.linuxfordevices.com/c/a/Linux-For-Devices-Articles/Introduction-to-Das-UBoot-the-universal-open-source-bootloader/">Introduction to Das U-Boot, the universal open source bootloader</a></br>
[2] <a href="http://www.denx.de/wiki/U-Boot">U-Boot</a></br>
[3] <a href="http://forum.xda-developers.com/showthread.php?t=2201146">U-boot for the multi-boot support</a></br>
[4] <a href="http://balau82.wordpress.com/2010/04/12/booting-linux-with-u-boot-on-qemu-arm/">Booting Linux with U-Boot on QEMU ARM</a></br>
[5] <a href="http://wiki.osdev.org/Bootloader">Bootloader</a></br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x2: Toolchain for Virtual Development Board]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/"/>
    <updated>2013-06-07T08:42:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#what-is-toolchain">What is toolchain ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#why-we-need-cross-toolchain">Why we need cross-toolchain ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#how-to-create-toolchain">How to create toolchain ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#emdebian-path">Emdebian path</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#summary">Summary</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/#kudos">Kudos</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>This is probably the most complicated topic of all related to embedded
development but we need to deal with it at the beginning. I read a lot about
toolchains but still don&rsquo;t know enough to explain details. I think that best
answers are in crosstool-ng <a href="http://crosstool-ng.org/hg/crosstool-ng/file/0fc56e62cecf/docs">documentation</a>.</p>

<p><a id="what-is-toolchain"></a></p>

<h3>What is toolchain ?</h3>

<p><em>Toolchain</em> as the name said is a set of tools chained together, so output of
one tool is the input for different tool. This is well known concept in
Linux (eg. pipes). In embedded environment toolchain is called cross-toolchain or
cross-compiler, because usually it compiles on one architecture and generate
code for another (eg. it compiles on x86 and generate code for arm)<a href="http://elinux.org/Toolchains">[1]</a>.</p>

<p><a id="why-we-need-cross-toolchain"></a></p>

<h3>Why we need cross-toolchain ?</h3>

<p>I suspect that your laptop/PC is not based on ARM processor, most probably it based on
x86 architecture so you cannot simply compile code and run it in our
virtual-arm-based environment. To prepare operating system and tools for it we
need cross-toolchain.</p>

<p><a id="how-to-create-toolchain"></a></p>

<h3>How to create toolchain ?</h3>

<p>Process of creating cross-toolchain from scratch is not easy and takes some
time. There are few other ways to get toolchain, than creating it from scratch.
First we can use prebuilt toolchain providers like: <code>CodeSourcery</code>, <code>Linaro</code>, <code>DENX
EDLK</code> or <code>Emdebian</code>. Second we can create toolchain using special building system like: <code>Buildroot</code>, <code>Crosstool-NG</code>
or <code>Bitbake</code>. I will not deal with preparing toolchain in this series
because procedure for creating it takes pretty long. So we have two options:</p>

<ul>
<li>read my article about <a href="http://pietrushnic.github.io/blog/2013/04/03/yet-another-quick-build-of-arm-unknown-linux-gnueabi">Crosstool-NG arm-unknown-linux-gnueabi</a></li>
<li>or install toolchain ready to use like <a href="http://www.emdebian.org/">Emdebian</a></li>
</ul>


<p><a id="emdebian-path"></a></p>

<h4>Emdebian path</h4>

<p>Add below lines to you <code>/etc/apt/sources.list</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://ftp.uk.debian.org/emdebian/toolchains unstable main
</span></code></pre></td></tr></table></div></figure>


<p>Install Emdebian keys, update and install cross-compiler with all related
packages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install emdebian-archive-keyring
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install gcc-4.7-arm-linux-gnueabi
</span></code></pre></td></tr></table></div></figure>


<h5>Dependency problems during installation</h5>

<p>If above attempt to install cross-compiler ends with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pietrushnic@eglarest:~/src<span class="nv">$ </span>sudo apt-get install gcc-4.7-arm-linux-gnueabi
</span><span class='line'>Reading package lists... Done
</span><span class='line'>Building dependency tree
</span><span class='line'>Reading state information... Done
</span><span class='line'>Some packages could not be installed. This may mean that you have
</span><span class='line'>requested an impossible situation or <span class="k">if </span>you are using the unstable
</span><span class='line'>distribution that some required packages have not yet been created
</span><span class='line'>or been moved out of Incoming.
</span><span class='line'>The following information may <span class="nb">help </span>to resolve the situation:
</span><span class='line'>
</span><span class='line'>The following packages have unmet dependencies:
</span><span class='line'> gcc-4.7-arm-linux-gnueabi : Depends: libgomp1-armel-cross <span class="o">(</span>&gt;<span class="o">=</span> 4.7.2-5<span class="o">)</span> but it
</span><span class='line'> is not going to be installed
</span><span class='line'> E: Unable to correct problems, you have held broken packages.
</span></code></pre></td></tr></table></div></figure>


<p>This means that Debian ustable cross-compiler is not available for you
configuration. You can read more about that
<a href="http://lists.debian.org/debian-embedded/2011/05/msg00029.html">here</a>.
To fix that issue simply change emdebian toochain repository to testing in
<code>/etc/apt/source.list</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>deb http://ftp.uk.debian.org/emdebian/toolchains testing main
</span></code></pre></td></tr></table></div></figure>


<h5>Emdebian toolchain configuration</h5>

<p>Check where <code>arm-linux-eabi-gcc-4.7</code> was installed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>whereis arm-linux-gnueabi-gcc-4.7
</span><span class='line'>arm-linux-gnueabi-gcc-4: /usr/bin/arm-linux-gnueabi-gcc-4.7 /usr/bin/X11/arm-linux-gnueabi-gcc-4.7
</span></code></pre></td></tr></table></div></figure>


<p>It is not linked to <code>arm-linux-gnueabi-gcc</code>, so we cannot give its prefix as <code>CROSS_COMPILE</code>
variable value, which is needed for bootloader and kernel compilation. We have to link
it to <code>arm-linux-gnueabi-gcc</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /usr/bin/arm-linux-gnueabi-gcc-4.7 /usr/bin/arm-linux-gnueabi-gcc
</span></code></pre></td></tr></table></div></figure>


<p>Toolchain is ready to use.</p>

<p><em>Note</em>: I tried <code>CodeSourcery</code> toolchain <code>arm-2012.09-64-arm-none-linux-gnueabi.bin</code>,
but it contain <code>binutils</code> defect that not allow correctly build kernel. If you see
something like this in log:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Error: selected processor does not support ARM mode <span class="sb">`</span>ldralt lr,<span class="o">[</span>r1<span class="o">]</span>,#4<span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That means you experience same thing, please use <code>Emdebian</code> or <code>Crosstool-NG</code> toolchain.</p>

<p><em>Note 2</em>: If you&rsquo;re <code>Ubuntu</code> user I have to suggest experiments with toolchain
build by your own, because I get really hard times trying to go through this
tutorial with Ubuntu/Linaro cross compiler provided in repository. Finally I
used <a href="http://pietrushnic.github.io/blog/2013/04/03/yet-another-quick-build-of-arm-unknown-linux-gnueabi">this</a>
to push things forward. U-boot compiled with Ubuntu/Linaro toolchain had problem
with <code>__udivsi3</code> instruction. This cause loop in initialization process.</p>

<p><a id="summary"></a></p>

<h3>Summary</h3>

<p>If you take effort of creating toolchain using <code>Crosstool-NG</code> than
congratulations.  But for simplifying whole <a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building"><strong>Virtual Development Board</strong></a>
series I will use <code>Emdebian</code> toolchain in further posts. Of course you can use
your brand new <code>Crosstool-NG</code> toolchain by simply remember that tools prefixes are
different. <code>Emdebian</code> uses <code>arm-linux-gnueabi-</code> and <code>Crosstool-NG</code> was created with
<code>arm-unknown-linux-gnueabi-</code>. Replace one with another every time when needed.
In <a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader">next post</a> we will deal with
bootloader.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://elinux.org/Toolchains">Toolchains</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x1: Qemu as an environment for embedded board emulation]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/"/>
    <updated>2013-06-07T08:27:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation</id>
    <content type="html"><![CDATA[<h2>Table of contents</h2>

<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#intro">Introduction</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#compilation">Compilation</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/#kudos">Kudos</a></li>
</ul>


<p><a id="intro"></a></p>

<h3>Introduction</h3>

<p>QEMU is a CPU emulator using dynamic binary translation to convert guest CPU
instructions into host CPU instructions<a href="http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf">[1]</a>. It supports many architectures from
x86, through ARM and MIPS, to MicroBlaze. According to compilation configuration
target list QEMU targets 26 different softmmu types.  Only for ARM it supports
33 machines (like ARM Versatile/PB (ARM926EJ-S) or Samsung NURI board
(Exynos4210)) and 28 CPUs (with cortex-a9 and pxa270). It gives access to
network, storage, video, usb, serial and other peripheral, also user defined. It
is developed under GNU GPL, so everybody are free to make modifications, improve
and extend it. This properties makes QEMU very good candidate for virtual board
emulator.</p>

<p><a id="compilation"></a></p>

<h3>Compilation</h3>

<p>Let&rsquo;s start creating our Virtual Development Board. As usually I will use latest
greatest version from git:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone http://git.qemu.org/git/qemu.git
</span></code></pre></td></tr></table></div></figure>


<p>Compile it and install. Right now I will use only <code>arm-softmmu</code> target because it
will emulate whole arm system for me. ARM right now dominated big part of
embedded market but we will see if situation won&rsquo;t change in feature.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>qemu
</span><span class='line'>./configure --target-list<span class="o">=</span>arm-softmmu
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>During configuration process you can encounter lack of <code>pixman</code>, just accept qemu
offer to initialize it as a submodule.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git submodule update --init pixman
</span><span class='line'>make <span class="c"># restart compilation process</span>
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>If compilation ends without problem than our first component is ready to use.
Right now we can emulate our ARM based board with many types of CPUs. List of
all available can be retrieved by running command <code>qemu-system-arm -cpu ?</code>, list
of emulated machines by <code>-M ?</code>. Now, let&rsquo;s talk about <a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board">toolchains</a>.</p>

<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>[1] <a href="http://infoscience.epfl.ch/record/149975/files/x86-llvm-translator-chipounov_2.pdf">Dynamically Translating x86 to LLVM using QEMU</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0x0: Intro to Virtual Development Board building]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/"/>
    <updated>2013-06-07T01:27:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#preface">Preface</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#first-question">First question: How to start ?</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#virtual-development-board">Virtual Development Board &ndash; table of contents</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/intro-to-virtual-development-board-building/#kudos">Kudos</a></li>
</ul>


<p><a id="preface"></a></p>

<h3>Preface</h3>

<p>There are many reasons why ambitious programmers should care about huge rush in
embedded market. IMO there is great potential in it. I don&rsquo;t want to go deep into
this but take a look at all tablets, phones, smart TVs and other cool stuff
like wireless in you washing machine or refrigerator (ok this two are right now only a gadgets :) ).
This is all embedded. Another thing is that wages of experienced embedded
developers are really high.</p>

<p>This environment is very interesting. A lot to learn, a lot to do, so why not get
your hands dirty ?</p>

<p><a id="first-question"></a></p>

<h3>First question: How to start ?</h3>

<p>To do real embedded development, to learn the most, you simply buy hardware like
all this <code>${animal}board (animal={panda,beagle,hawk})</code>. This is the best way but
if you&rsquo;re beginner (like me) you probably don&rsquo;t want to spend $50 for stuff that
you throw away after month because you don&rsquo;t like to deal with it or problems
are not on your level, than maybe you should take a look around and wonder if it
is possible to build virtual environment to check what kind of problem you may
encounter learning embedded ? BTW this is cheap and fun, so potential ROI is big
enough to try.</p>

<p>IMHO this is where world going: proof of concept embedded platforms affordable
for common man (not only for US/West Europe), testing environment based on
virtualized/emulated solution, to check basic features, speed up testing, development
and deployment. That&rsquo;s why we see so active development of software like Qemu/KVM.</p>

<p><a id="virtual-development-board"></a></p>

<h3>Virtual Development Board &ndash; table of contents</h3>

<p>I realize that it is achievable and I will learn a lot trying to implement this
idea. Finally I was convinced reading <a href="http://www.elinux.org/Virtual_Development_Board">this</a>
two years old article on <a href="http://www.elinux.org">eLinux.org</a>.</p>

<p>I decide to divide this article on few parts because IMHO it was to big to read
it at once. Also people interesting in particular topic won&rsquo;t have to scrolling <code>&gt;2k</code>
words post. List of all articles in this series:</p>

<ol>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation/">Qemu as an environment for embedded board emulation</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/toolchain-for-virtual-development-board/">Toolchain for Virtual Development Board</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/embedded-board-bootloader/">Embedded board bootloader</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/linux-kernel-for-embedded-system/">Linux kernel for embedded system</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-network-configuration-and-tftp-for-virtual-development-board/">Qemu network configuration and tftp for Virtual Development Board</a></li>
<li><a href="http://pietrushnic.github.io/blog/2013/06/07/root-file-system-for-embedded-system/">Root file system for embedded system</a></li>
</ol>


<p><a id="kudos"></a></p>

<h3>Kudos</h3>

<p>At the and of this intro I want to give big kudos to all those hackers without
whom creating this article would not be possible. Thanks for sharing your
knowledge. Every time when I use knowledge that found by googling I&rsquo;m trying
to stick link for further reading.</p>

<h4><a href="http://pietrushnic.github.io/blog/2013/06/07/qemu-as-an-environment-for-embedded-board-emulation"><em>Enjoy!</em></a></h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress depoying problem after migrating to *.github.io]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/05/16/octopress-depoying-problem-after-migrating-to-star-dot-github-dot-io/"/>
    <updated>2013-05-16T22:20:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/05/16/octopress-depoying-problem-after-migrating-to-star-dot-github-dot-io</id>
    <content type="html"><![CDATA[<p>My story was that I migrate to new environment and want to recover my octopress
setup. I thought that it will be as simple as cloning my blog github repository
and start to work.</p>

<p>First problem that I experienced was lack of octopress repository as a remote
branch &ndash; it is required to update your ocotpress blog to latest code. Fix was
simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add octopress git://github.com/imathis/octopress.git</span></code></pre></td></tr></table></div></figure>


<p>After updating my blog I tried to deploy new article and I get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>ERROR: Repository not found.
</span><span class='line'>fatal: The remote end hung up unexpectedly</span></code></pre></td></tr></table></div></figure>


<p>I figured out that my github pages were incorrectly set, so I run <code>rake
setup_github_pages</code>. If you&rsquo;re user of github pages long enough you know that
few weeks ago github decide to migrate domain from <code>*.github.com</code> to
<code>*.github.io</code>. So I followed instructions in setup process and used <code>io</code> domain,
this is incorrect. If you have github repository for your pages with <code>com</code> in
name you should use your orginal repository address. Repository was not changed.
This is obvious but I lost few minutes to figure out whats going on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workflow imporovement with Open Source tools - part 1]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/05/16/workflow-imporovement-with-open-source-tools/"/>
    <updated>2013-05-16T22:16:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/05/16/workflow-imporovement-with-open-source-tools</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>I want to start a series of articles to describe how I improve my workflow with
geeky Open Source applications. I will concentrate on terminal applications that
I try to use in my GTD process.</p>

<h3>Terminal</h3>

<h4>Solarized gnome-terminal</h4>

<p>If you already don&rsquo;t know what solarized color scheme is then please take a look
at <a href="http://ethanschoonover.com/solarized">this page</a>. To install solarized
colorscheme in gnome-terminal simply follow instruction from this <a href="https://github.com/sigurdga/gnome-terminal-colors-solarized">git repository</a>.</p>

<h3>Mutt again</h3>

<p>During last days I spent a lot of time to tweak my mutt configuration. Here I
will give you few hints about things that I learned.</p>

<h4>Solarized mutt</h4>

<p>To enable solarized colorscheme in mutt simply download one of scheme files from <a href="https://github.com/altercation/mutt-colors-solarized">github</a>. If you installed
dark scheme for your gnome-terminal then I suggest <code>mutt-colors-solarized-dark-16.muttrc</code>.
Copy this file for example to <code>$HOME/.mutt</code> and source it in muttrc file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source $HOME/.mutt/mutt-colors-solarized-dark-16.muttrc</span></code></pre></td></tr></table></div></figure>


<h4>Width of From column</h4>

<p>Usually from field in today&rsquo;s emails is longer than 19 characters. If this
happens mutt by default will not display whole string. To change this behavior
you can manipulate <code>index_format</code> variable. I set mine to 30:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set index_format="%4C %Z %{%b %d} %-30.30L (%4l) %s"</span></code></pre></td></tr></table></div></figure>


<h4>Sidebar</h4>

<p>Finally I gave up sidebar for using latest code without annoying <code>tls_socket_read</code> error.
Switching between IMAP folders is not so bad, you can quickly display all
folders by <code>c&lt;Tab&gt;&lt;Tab&gt;</code> or simply <code>y</code></p>

<h4>Offlineimap</h4>

<p>This is probably best program to synchronize your emails with local storage. It
also has feature that allow synchronization between different IMAP servers but
I&rsquo;m not using it. Few things are crucial when using <code>offlineimap</code>:</p>

<ul>
<li>probably easiest way to keep passwords secret is using python hooks for gnome-keyring,
detailed description how to integrate it with <code>offlineimap</code> is
<a href="http://www.clasohm.com/blog/one-entry?entry_id=90957">here</a>. Debian name of
<code>gnome-python2-gnomekeyring</code> is different: <code>python-gnomekeyring</code>.</li>
<li>Use meaningful <code>localfolders</code> because you will use it in <code>mutt</code> configuration</li>
</ul>


<p>Typical configuration of <code>$HOME/.offlineimaprc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[mbnames]
</span><span class='line'>enabled = yes
</span><span class='line'>filename = ~/.mutt/muttrc.mailboxes
</span><span class='line'>header = "mailboxes "
</span><span class='line'>peritem = "+%(accountname)s/%(foldername)s"
</span><span class='line'>sep = " "
</span><span class='line'>footer = "\n"
</span><span class='line'>
</span><span class='line'>[general]
</span><span class='line'>metadata = ~/.offlineimap
</span><span class='line'>maxsyncaccounts = 5
</span><span class='line'>maxconnections = 2
</span><span class='line'>accounts = account1, account2
</span><span class='line'>status_backend = sqlite
</span><span class='line'>pythonfile = ~/.mutt/offlineimap.py
</span><span class='line'>
</span><span class='line'>[Account account1]
</span><span class='line'>autorefresh = 3
</span><span class='line'>localrepository = acc1_local
</span><span class='line'>remoterepository = acc1_remote
</span><span class='line'>
</span><span class='line'>[Repository acc1_local]
</span><span class='line'>type = Maildir
</span><span class='line'>localfolders = ~/.mail/account1
</span><span class='line'>
</span><span class='line'>[Repository acc2_remote]
</span><span class='line'>type = Gmail
</span><span class='line'>remoteusereval = get_username("account1")
</span><span class='line'>remotepasseval = get_password("account1")
</span><span class='line'>sslcacertfile = /etc/ssl/certs/ca-certificates.crt
</span><span class='line'>
</span><span class='line'>[Account account2]
</span><span class='line'>autorefresh = 3
</span><span class='line'>localrepository = acc2_local
</span><span class='line'>remoterepository = acc2_remote
</span><span class='line'>
</span><span class='line'>[Repository acc2_local]
</span><span class='line'>type = Maildir
</span><span class='line'>localfolders = ~/.mail/account2
</span><span class='line'>
</span><span class='line'>[Repository acc2_remote]
</span><span class='line'>type = Gmail
</span><span class='line'>remoteusereval = get_username("account2")
</span><span class='line'>remotepasseval = get_password("account2")
</span><span class='line'>sslcacertfile = /etc/ssl/certs/ca-certificates.crt</span></code></pre></td></tr></table></div></figure>


<p>What this means by section:</p>

<ul>
<li><code>[mbnames]</code> &ndash; automatically create mailboxes folders according to your
configuration on IMAP server</li>
<li><code>[general]</code> &ndash; most important things here are self explanatory accounts
variable and <code>max{syncaccounts,connections}</code>, first said how many accounts
should be synchronized and second how many simultaneous connections should be
used</li>
<li><code>[Account *]</code> &ndash; contain sync refresh time in minutes (<code>autorefresh</code>) and link
to local and remote repository definitions (<code>localrepository</code> and
<code>remoterepository</code>)</li>
<li><code>[Repository *]</code> &ndash; for local folder and its type and for remote gnome-keyring
configuration</li>
</ul>


<h4>Multiple account configuration</h4>

<p>To simplify multiple accounts configuration I added two things:</p>

<ul>
<li>separated account files configuration &ndash; in my case placed in <code>$HOME/.mutt/accounts</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set postponed   = +account1@server.com/Drafts
</span><span class='line'>set spoolfile   = +account1@server.com/INBOX
</span><span class='line'>set record      = +account1@server.com/Sent
</span><span class='line'>set from        = 'account1@server.com'
</span><span class='line'>set realname    = 'My Name'
</span><span class='line'>set smtp_url    = smtps://acc1@smtp.server.com:587
</span><span class='line'>set smtp_pass   = $my_pass
</span><span class='line'>set signature   = "~/.mutt/signature.example"</span></code></pre></td></tr></table></div></figure>


<ul>
<li>folder hooks for particular account &ndash; it cause automatic loading of
configurations when folder was changed (in <code>$HOME/muttrc</code>):</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>folder-hook 'account1@server.com' 'source $HOME/.mutt/accounts/account1'</span></code></pre></td></tr></table></div></figure>


<h4>Separate mailing list file</h4>

<p>I keep my mailing list configuration file separated and source it in my
<code>$HOME/.muttrc</code>. I&rsquo;m not mailing list advanced user, so right now I have manually
created IMAP folders and Gmail filters to move mails from mailing list to this
folders. On the mutt side I use <code>subscribe</code> command to indicate that particular
mail id is a mailing list.</p>

<h3>Personal informations</h3>

<p>Some informations in my configuration files shouldn&rsquo;t be available for all. I
mean my email account configuration, my todo list, passwords and things like
that. To store this informations I use additional private git repository and use
it as a submodule for my workspace configuration. I wrote post about keeping
configuration using git
<a href="http://pietrushnic.github.io/blog/2012/02/19/improve-productivity-by-tracking-work">here</a> and
<a href="http://pietrushnic.github.io/blog/2012/02/20/improve-productivity-by-tracking-work_20">here</a>.</p>

<h3>Taskwarrior and vit</h3>

<p>I really like <code>taskwarrior</code> as a GTD tool but I was tired of writing everything
every time I wanted to change sth. I found <code>vit</code>. Vit is a vi-like interface
to task list generated by <code>taskwarrior</code> it works really great. Mostly it is
written in perl and there is no official repository for its code base but latest
version is from April 2013. I use lot of <code>project:</code> and <code>+flag</code> to update my
TODO list. I prefer <code>long</code> filter.</p>

<h4>My taskwarrior projects and flags</h4>

<p>I have few ongoing projects like <code>blog</code>, <code>productivity</code> and <code>ideas</code>. In addition I use
few flags like <code>ideas</code>, <code>finish</code>, <code>enhancement</code>, <code>fix</code> or <code>bug</code>. So when I
connect project and flag I get few categories like:</p>

<ul>
<li><code>blog ideas</code> for new articles ideas</li>
<li><code>blog finish</code> for articles that should be finished ASAP</li>
<li><code>blog bug/fix</code> for articles that have to be changed for some reason</li>
<li><code>productivity bug/fix</code> for productivity tools configuration improvements</li>
<li><code>productivity ideas</code> for new improvements</li>
</ul>


<h3>Summary</h3>

<p>I think this is enough for first post from this series. Hope it was helpful. If
yes then please share, if no then comment what I should improve. Thanks for
reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird to Mutt migration - tips & tricks]]></title>
    <link href="http://pietrushnic.github.io/blog/2013/05/15/thunderbird-to-mutt-migration/"/>
    <updated>2013-05-15T18:40:00+02:00</updated>
    <id>http://pietrushnic.github.io/blog/2013/05/15/thunderbird-to-mutt-migration</id>
    <content type="html"><![CDATA[<h3>Preface</h3>

<p>I migrate with my working environment to laptop. My workstation going older and
I don&rsquo;t have time to maintain few systems to keep it clean and in sync. I
probably have to improve my work flow but right now I have different problems.
Few weeks ago after changing environment to mobile and powerful laptop I also
changed OS to Ubuntu and mail client to Thunderbird. I have to admit that both
choices were mistake and I want to came back to Debian and Mutt. This post is
about throwing out Thunderbird and a logical continuation of Mutt tutorial (part
<a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-1-setup-imap-account">1</a>, <a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-2-secure-login">2</a>,
<a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-3-sidebar-urls-in-e">3</a> and <a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-4-html-mails-address">4</a>).</p>

<p>So what was wrong with Thunderbrid ?</p>

<ul>
<li>Not clear configuration settings &ndash; for example I tried to wrap word at 80th
character, default value was set to 72 but it seems not work anyway. I try to
use few googled hints but nothing works.</li>
<li>Setting up Thunderbird to work as a community developer tool was not so
obvious.</li>
<li>Junk messages was marked but default filter show everything so for some IMAP
boxes I get lot of spam and had hard time to find anything out there.</li>
<li>Conversation mode should be easily toggled.</li>
<li>GUI slow switching between different modes.</li>
<li>Lack of my editor of choice.</li>
</ul>


<p>If I decide to use GUI tool for some reason I require from it to be intuitive
and most of my options should be available at few clicks. Probably most of my
problems I could solve by giving enough effort to google it but if I have to
choose hard to configure MUA I will probably be in favor of terminal tool like
Mutt. So right now I&rsquo;m back with Mutt and determination to adjust Mutt to my
work flow.</p>

<h3>Git and undelete old configuration</h3>

<p>I won&rsquo;t go through whole Mutt tutorial once more time. I remember that there was
muttrc in my workspace git repository. So first goolge query returned what
needed I found <a href="http://stackoverflow.com/questions/953481/restore-a-deleted-file-in-a-git-repo">this</a> stackoverflow post.
I reverted muttrc and other related files deletion.</p>

<h3>Short informations</h3>

<ul>
<li>In Ubuntu there is no <code>gpg</code> package, to get encryption you can use <code>gpgsm</code>.</li>
<li>If your e-mail account provider require user name with <code>@</code> (at sign), then you
can pass it in mutt using below pattern:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set folder = imaps://[login]@[imap_server]/ # i.e. imaps://foo@bar.pl@imap.srv.pl/</span></code></pre></td></tr></table></div></figure>


<ul>
<li>You can debug Mutt using <code>-d 5</code> parameter, this option creates
<code>$HOME/.muttdebug0</code> file with verbose output, debug option can be changed in
range 1-5.</li>
<li>Use latest-greatest version compiled from source instead version provided
by distribution repository. It can help you get rid of problems like <code>tls_socket_read (Decryption has failed.)</code>.</li>
<li>Some accounts will not work with authenticating method presented in my
previous post about gpg (<a href="http://pietrushnic.github.io/blog/2012/05/13/mutt-tutorial-part-2-secure-login">mutt tutorial part 2</a>).
To workaround this you can use different format of folder variable:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set folder = imaps://[login]:[passwd_var]@[imap_server]/ # i.e. imaps://foo:$my_bar_passwd@bar.pl@imap.srv.pl/</span></code></pre></td></tr></table></div></figure>


<h3>Compile Mutt from source</h3>

<p>If you looking for latest Mutt version consider compiling mutt by yourself.
First, download sources:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hg clone http://dev.mutt.org/hg/mutt#HEAD
</span><span class='line'>hg update -C HEAD
</span><span class='line'>hg pull -u</span></code></pre></td></tr></table></div></figure>


<p>There are lot of options to prepare Mutt compilation, but right now I can
suggest this parameters:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd mutt
</span><span class='line'>./prepare --with-ssl --enable-debug --enable-imap --enable-smtp --enable-pop \
</span><span class='line'>-enable-hcache --with-gss --with-gnutls --with-sasl
</span><span class='line'>make && sudo make install</span></code></pre></td></tr></table></div></figure>


<p>If make will complain about <code>gssapi/gssapi.h: No such file or directory</code> then
you need to install <code>libkrb5-dev</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libkrb5-dev</span></code></pre></td></tr></table></div></figure>


<h3>Summary</h3>

<p>That&rsquo;s all in this post but I&rsquo;m sure that there will be next in this topic. I
hope to improve my whole workflow and write few posts about improving
productivity using open source tools.</p>
]]></content>
  </entry>
  
</feed>
